// Code generated by go-bindata.
// sources:
// code/templates/list.go.t
// code/templates/map.go.t
// DO NOT EDIT!

package code

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesListGoT = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x57\xcf\x4f\xe3\x38\x14\xbe\xe7\xaf\x78\x5c\x56\xce\x2a\xa4\xcb\x15\xd1\xc3\xee\x6a\x3a\x42\x02\x84\xe8\x0c\x73\x40\x15\xca\x24\x4e\x31\x75\xed\xca\x76\xca\x54\x51\xfe\xf7\x91\xed\x34\x71\xda\x38\x20\xa0\x33\x68\x38\x51\xe7\xfd\xf8\xde\xf7\xec\xcf\xcf\x65\x19\x5f\x2f\xe6\x55\x15\x04\x6a\xb3\xc2\x50\x96\xf1\x55\xb2\xc4\x55\x75\x2d\x70\x46\xd2\x44\x61\xc8\x0b\x96\x02\x2a\xcb\xf8\xcb\x3f\x55\x15\xc2\x77\xce\xe9\xae\xf1\x2d\x91\x44\x71\x51\x9b\x12\x20\x4c\x45\xb0\x4e\x28\x0c\x7a\x5d\x60\x29\x27\xda\xc3\xba\xe5\x44\x48\x15\x81\xc4\x29\x67\xd9\xb0\x27\x48\x25\x8a\x54\x41\x19\x00\x00\xdc\x53\x22\x15\xdc\xcd\x6a\x17\xb3\x46\x75\x6c\xb6\x9f\x2b\x30\x5f\xcb\x92\xe4\x10\x9f\xcb\xe9\x86\xa5\xb5\xc3\x3d\xe5\xe9\x02\xe4\x86\xa5\xf1\xcd\xb7\xcb\x42\xe1\x1f\xb5\x25\x66\x59\x55\x05\x55\x10\x18\x94\x57\xf8\xa9\x89\x89\x42\xf8\xbb\x85\x64\xb1\x08\xac\x0a\xc1\x3a\x66\x13\xc1\x97\x53\x4a\x52\x8c\x1a\x88\x65\x15\xf6\x46\x6c\x4d\x89\xc2\x4b\xd9\xd6\xe4\xcf\xf4\x57\xb3\x5e\x5a\x22\x4e\xc1\xfa\xb6\x98\x11\x75\xbc\x43\x98\x10\xaa\xb0\x40\x79\x4f\xaf\x7b\xd2\xf4\x50\x45\x63\x43\x56\x7c\x73\xc1\xd3\x05\x0a\xcd\x5a\x86\x73\x2c\xda\x2f\x5f\x19\x6d\xbf\x6d\x39\xac\x61\xcb\x82\x2a\x38\x1d\xf7\x21\x77\x08\x02\x9b\x2b\xe7\x02\xee\x23\x58\x6b\x07\x91\xb0\x39\x36\x39\x74\xbf\x2d\x3c\xfd\x47\x72\xc8\xd1\x3a\x74\x56\xda\x44\xb5\xf1\x18\x92\xd5\x0a\xb3\x0c\xb9\xab\x11\xac\xc3\xc6\xc5\xa6\xab\x5c\x6a\xad\xad\x8f\xc6\xf3\x41\x1e\xcf\x8e\xd3\x87\x84\x6d\x77\x31\x34\x3d\xd3\x11\xa5\x2e\x66\x99\x2c\x30\x72\x6d\x2c\x94\x39\x37\xa7\x01\xb9\xd5\xf4\xb4\xc0\xd7\x86\xe7\x5a\xe1\xb6\x63\xfb\xfb\x25\x14\xfb\x69\x76\xcb\x3a\x3b\x86\x75\xe7\x63\x15\xec\xff\x97\x52\x2e\x71\xdd\x07\x69\x51\x55\x28\x0c\xf6\x89\x97\x5e\xe6\x35\xed\x7f\x24\xc5\xbd\x44\xbe\x27\x75\x9f\x92\xf4\x01\xad\x6b\xb5\xde\x95\xef\x5f\x70\xfa\x35\x11\xe4\xf9\xe3\x7c\x54\x43\x44\xda\x76\xff\x60\x9b\x4a\xe9\xd0\xd1\xa5\x3e\x02\x3e\x63\x65\xef\xa7\xb0\xd9\x38\x87\xd2\x39\x0b\xc4\x96\x77\x47\x66\x3e\x44\xff\xb2\x8d\x47\x43\xf4\xcd\x77\xc0\x3e\xbc\x56\x56\x4d\x5d\x4a\x14\x78\xa8\x01\x79\x42\x25\xf6\x96\x4c\xe9\x87\x2d\xf9\xc8\x5f\xb3\xad\x69\xa0\x68\x43\x8a\xf7\xd6\x65\xd9\x44\x4f\x38\xbd\x95\x47\xba\x8e\xa4\xa0\xea\xd6\x1d\x9a\x0e\xbb\x43\xdf\xbc\x07\x76\x25\xaa\xc3\x45\x5b\xcf\x10\x23\x17\xc9\x87\x22\xa4\x60\x99\x66\xc3\xc1\xfe\x36\xa2\x6c\xc4\xf1\x30\x53\xc6\x48\x93\x14\x8c\x46\x30\xe1\x02\x24\x17\xaa\x9f\xb2\xff\x36\x7a\x86\x45\xbe\xe1\xd6\x15\xf0\x67\x29\xf2\x32\xe4\x27\x88\xc6\x75\xe6\x71\x3d\x5f\xbf\x48\x72\x35\x3a\x2d\xe4\x8f\x56\x76\xf5\x11\x2f\xbb\x12\x69\x83\xa1\x56\x2b\xa3\x46\x37\x1f\x67\x66\x52\xf6\x04\x66\x28\xd4\x41\xbb\x13\x31\xc5\x4d\xa8\xd0\x87\x69\xfa\x94\xac\x1c\x4c\x65\xc3\xcc\x7e\x7e\x5d\x6c\xf3\x23\x7a\x81\xa0\x4f\xb9\x50\xcd\x70\xf1\xbe\x0d\xd0\x3b\x23\x36\xf1\x69\x18\x78\x79\xf9\x9f\x72\x86\xfb\x1e\x27\xef\x7d\x60\x52\xbe\x22\x38\x6b\x46\xad\x66\x7a\x8f\x3a\x3d\x08\xb7\xb6\x1b\x64\x1d\x1a\x12\xbb\xa3\x4b\xff\x43\xc8\xba\x98\x46\x8e\x46\x70\x59\xa8\x44\x71\x21\x3d\xf7\x8a\x9d\xf1\xed\xfb\x27\x8e\xe3\x56\x37\x0e\x72\x18\x76\x9e\x16\x74\xfb\xaa\x30\xf9\xe3\x38\xf6\xee\xbe\x6b\x81\x7f\x27\x50\x93\xb6\x69\xc2\x20\x50\xbe\x42\x6f\xd2\xe1\x57\xc0\x25\x79\x67\xf7\xc0\x19\x9c\x38\xaa\xba\x7f\xbb\x58\x3d\xdd\x79\x5b\x6e\x4f\xa9\x1b\xe9\xf8\x64\xb6\x4b\xc8\xd6\xec\xb4\xd7\x6e\xf7\x19\x38\x1a\x69\x42\x6e\xc8\xfc\x41\x41\xf0\x33\x00\x00\xff\xff\x3d\x72\x1b\x85\x38\x11\x00\x00")

func templatesListGoTBytes() ([]byte, error) {
	return bindataRead(
		_templatesListGoT,
		"templates/list.go.t",
	)
}

func templatesListGoT() (*asset, error) {
	bytes, err := templatesListGoTBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/list.go.t", size: 4408, mode: os.FileMode(420), modTime: time.Unix(1492555514, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesMapGoT = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\xd3\xcd\x8a\xdb\x30\x10\x07\xf0\xbb\x9e\xe2\xdf\xcb\x22\x2f\xc6\xb4\xd7\x40\x8e\xa5\x14\xda\xa5\x64\x77\xdb\x43\x59\x8a\x6b\x8f\xb7\xc1\x1f\x0a\xb2\xec\xd6\x88\x79\xf7\x22\x45\xfe\x6a\x62\x7a\xca\xcd\x96\x66\xd0\x6f\x46\x23\x6b\x93\x2f\xe5\x2b\xb3\x10\x66\x38\x11\xac\x4d\x1e\xd2\x9a\x98\xbf\x1e\xdb\xa3\x51\x1a\x45\xd7\x64\x90\xd6\x26\x4f\x6f\x99\x63\xb7\xff\xf4\x8e\x39\xc2\x4f\xa5\xaa\x29\x07\x3e\x09\xcc\x68\x8d\xee\x32\x03\x2b\x00\xe0\x47\x9d\x9e\x50\xa7\xa7\xef\x21\xfd\x25\x64\x0b\xbf\x6b\xed\xb1\x40\xf2\xb1\x7d\x1c\x9a\x8c\xf9\x9c\x50\xa9\xac\xc4\x7d\x3b\x34\x59\x72\xf8\xf6\xb9\x33\xf4\x27\x84\x52\x93\x33\x0b\x16\xc2\x7b\x1e\xe8\xf7\x04\x95\x11\xee\xa7\x9f\x70\xb0\xa6\x16\xbb\x3d\xee\xa6\xf5\xf3\xf2\x68\xda\x5d\x43\x59\x8e\xa7\xa0\x2b\xb4\x89\xb7\xc3\xdd\xd2\xb7\x4e\x3b\x33\xdd\x37\x07\x88\xe9\x74\xe3\x3c\x93\x5d\xd6\x0b\x6f\x84\x0f\x64\x64\x49\x03\x82\x26\x82\xec\xc7\x26\xc7\x28\x54\xd7\xe4\xbe\xd5\x51\xa8\x6c\x2d\x83\x5f\xab\x13\x0f\x4b\x0e\x9f\x54\x56\xca\xc8\xaf\xe5\x54\x90\x9e\x77\x9e\x9b\x6a\xde\x1b\x99\xfe\xa7\x1f\x4f\xd9\xbb\x68\xd7\x97\x92\x86\x97\x05\x7e\x0b\xfe\xb8\x86\xc7\xe8\xd3\x6a\x1e\x8f\xff\x6b\x37\xb1\xdb\xd6\x05\x10\x7b\x77\xde\x96\xed\x7d\x9a\xfd\x92\x7d\x98\xe0\x7f\x47\xfa\x66\xad\x2c\x94\x46\x19\xa3\x77\xa3\xa7\xd3\xe6\x95\x02\x18\xf3\xf4\x1d\x0b\xbc\x09\x2e\xe9\x42\x23\xd8\x71\x46\xc6\xb1\xd9\x28\xe9\xf9\x94\xa7\x86\x64\xab\xb3\x6b\xc3\xbb\x7c\x03\x37\x69\xfd\x65\x6d\x4e\x32\x17\x36\x5e\x8d\xbf\x98\xcb\x07\x50\x6f\x95\x75\xa0\x5a\xf5\xb4\x7e\x01\x37\x29\x20\xa7\x8a\x0c\xc9\xb3\x33\x46\x49\x43\x24\x58\xfc\x0d\x00\x00\xff\xff\xfe\x75\x61\x17\xfe\x04\x00\x00")

func templatesMapGoTBytes() ([]byte, error) {
	return bindataRead(
		_templatesMapGoT,
		"templates/map.go.t",
	)
}

func templatesMapGoT() (*asset, error) {
	bytes, err := templatesMapGoTBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/map.go.t", size: 1278, mode: os.FileMode(420), modTime: time.Unix(1483615591, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/list.go.t": templatesListGoT,
	"templates/map.go.t": templatesMapGoT,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"list.go.t": &bintree{templatesListGoT, map[string]*bintree{}},
		"map.go.t": &bintree{templatesMapGoT, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

