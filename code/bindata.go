// Code generated by go-bindata.
// sources:
// code/templates/list.go.t
// code/templates/map.go.t
// DO NOT EDIT!

package code

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesListGoT = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x97\xcd\x4f\xe3\x38\x14\xc0\xef\xf9\x2b\x1e\x97\x95\xb3\x0a\xe9\x72\x45\xf4\xc0\xae\xb6\x12\x52\x41\x08\x76\x99\x03\xaa\x50\x26\x71\x8a\xa9\x6b\x57\xb6\x53\xa6\x8a\xf2\xbf\x8f\x6c\xe7\xc3\x69\xe3\x30\xe2\x63\x06\x0d\x27\x9a\xbc\xcf\xdf\xcb\x7b\x7e\x2e\xcb\xf8\x7a\xb5\xac\xaa\x20\x50\xbb\x0d\x86\xb2\x8c\xaf\x92\x35\xae\xaa\x6b\x81\x33\x92\x26\x0a\x43\x5e\xb0\x14\x50\x59\xc6\xff\xfd\x55\x55\x21\x7c\xe5\x9c\xee\x0b\xdf\x11\x49\x14\x17\xb5\x28\x01\xc2\x54\x04\xdb\x84\xc2\xa8\xd6\x1c\x4b\x39\xd3\x1a\x56\x2d\x27\x42\xaa\x08\x24\x4e\x39\xcb\xc6\x35\x41\x2a\x51\xa4\x0a\xca\x00\x00\xe0\x81\x12\xa9\xe0\x7e\x51\xab\x98\x67\x54\xdb\x66\x87\xbe\x02\xf3\xb6\x2c\x49\x0e\xf1\x85\xbc\xdd\xb1\xb4\x56\x78\xa0\x3c\x5d\x81\xdc\xb1\x34\xbe\xf9\x72\x59\x28\xfc\xad\x96\xc4\x2c\xab\xaa\xa0\x0a\x02\x13\xe5\x15\x7e\x6e\x6d\xa2\x10\xfe\xec\x42\xb2\xb1\x08\xac\x0a\xc1\x7a\x62\x33\xc1\xd7\xb7\x94\xa4\x18\xb5\x21\x96\x55\x38\x68\xb1\x13\x25\x0a\xaf\x65\x97\x93\xdf\xd3\x1f\xed\xf3\xd2\x82\x38\x05\xab\xdb\xc5\x8c\xa8\xa3\x1d\xc2\x8c\x50\x85\x05\xca\x07\x6a\x3d\xe0\x66\x00\x15\x8d\x0d\xac\xf8\x66\xce\xd3\x15\x0a\xcd\xb3\x0c\xe7\x58\x74\x6f\xfe\x67\xb4\x7b\xd7\x30\xac\xc3\x96\x05\x55\x70\x3a\x1d\x8a\xdc\x01\x04\xd6\x57\xce\x05\x3c\x44\xb0\xd5\x0a\x22\x61\x4b\x6c\x7c\xe8\x7a\xdb\xf0\xf4\x1f\xc9\x21\x47\xdb\xd0\x79\xd2\x39\xaa\x85\xa7\x90\x6c\x36\x98\x65\xc8\x7d\x1a\xc1\x36\x6c\x55\xac\xbb\xca\x45\x6b\x65\x7d\x18\x2f\x46\x39\x9e\x1d\xa7\x8f\x09\x6b\xbe\x62\x68\x6b\xa6\x2d\x4a\x9d\xcc\x3a\x59\x61\xe4\xca\xd8\x50\x96\xdc\x74\x03\x72\xb3\x19\x28\x81\xaf\x0c\x2f\x95\xc2\x2d\x47\xf3\xfb\x47\x10\xfb\x31\xbb\x69\x9d\x1d\xc3\xb6\xf7\xb2\x0a\x0e\xff\x4b\x29\x97\xb8\xae\x83\xb4\x51\x55\x28\x0c\x0e\xc1\x4b\x2f\x79\x8d\xfd\xb7\x44\x3c\x08\xf2\x3d\xd1\xfd\x9b\xa4\x8f\x68\x5b\x4f\xeb\xfd\xf1\xfd\x13\xba\x5f\x83\x20\x2f\xb7\xf3\x51\x1d\x22\xd2\xb2\x87\x8d\x6d\x32\xa5\x63\xad\x4b\x35\x80\x41\x02\xe7\x6c\xe7\x69\x59\x7d\xd0\x7c\x60\xda\xaf\x9d\x62\x26\x1f\x25\x0a\x3c\x96\x6f\x9e\x50\x89\x7d\x45\x3f\xa7\xf4\xd3\xa6\x7c\xe4\xcf\xd9\xe6\x34\x92\xb4\x81\xe2\x3d\xe4\x58\x36\xd3\x0b\xc5\x60\xe6\x91\xce\x23\x29\xa8\xba\x73\x77\x94\x66\x92\x7c\xd2\x6f\x60\x7f\x22\xf4\x58\x74\xf9\x8c\x11\x99\x27\x9f\x0a\x48\xc1\x32\x4d\xc3\x89\xfd\x6d\xa0\xac\xc5\xe9\x38\x29\x23\x64\xc6\xc3\x64\x02\x33\x2e\x40\x72\xa1\x86\x91\xfd\xbd\xd3\x2b\x23\xf2\xed\x92\xee\xbc\x7c\x11\x91\x97\x90\x1f\x10\x8d\x6b\xcf\xd3\x7a\x9d\x3d\x98\x70\x43\x41\xeb\xe8\xf4\xdc\x7c\xd2\x5b\xb8\x6d\xf1\xde\xc2\xd8\x58\x45\x35\xd5\x7b\xb2\x88\x1a\xc2\xf7\x4f\x8b\xd0\x3b\x39\xe7\x98\xa1\x50\x1b\xed\x2f\xa0\x14\xb7\xa6\x42\x5f\x4c\xb7\xcf\xc9\xc6\x89\xa9\x6c\xc9\x1c\xfa\xd7\xc9\xb6\x3f\x22\x47\xc8\x6b\x9b\x0b\xd5\x9e\xe5\xef\x5b\x00\xfd\x65\xc4\xc6\x3e\x0d\x03\x2f\x97\x7f\x28\x67\x78\xe8\x2e\xf0\xde\x0d\x93\xf2\x0d\xc1\x59\xbb\xd9\xb4\xcb\x72\xd4\xab\x41\xd8\xc8\xee\x90\x55\x68\x21\xf6\x37\x85\xe1\x7b\x87\x55\x31\x85\x9c\x4c\xe0\xb2\x50\x89\xe2\x42\x7a\xce\x15\xbb\x52\xdb\xeb\x46\x1c\xc7\xdd\xdc\xf8\x90\x66\xd8\xdb\xe4\x69\xb3\xc4\x1b\xff\x71\x1c\x7b\xbf\xbe\x6b\x81\x7f\x65\xa0\xc6\x6d\x5b\x84\xd1\x40\xf9\x06\xbd\x69\x0e\xbf\x22\x5c\x92\xf7\xbe\x1e\x38\x83\x13\x67\xaa\x1e\x9e\x2e\x76\x9e\xee\x5d\xe5\x9a\x2e\x75\x2d\x1d\x9f\x2c\xf6\x81\x34\x62\xa7\x83\x72\xfb\xb7\xae\xc9\x44\x03\xb9\x21\xcb\x47\x05\xc1\xf7\x00\x00\x00\xff\xff\x0b\x40\x56\x45\xa7\x10\x00\x00")

func templatesListGoTBytes() ([]byte, error) {
	return bindataRead(
		_templatesListGoT,
		"templates/list.go.t",
	)
}

func templatesListGoT() (*asset, error) {
	bytes, err := templatesListGoTBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/list.go.t", size: 4263, mode: os.FileMode(420), modTime: time.Unix(1492554887, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesMapGoT = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\xd3\xcd\x8a\xdb\x30\x10\x07\xf0\xbb\x9e\xe2\xdf\xcb\x22\x2f\xc6\xb4\xd7\x40\x8e\xa5\x14\xda\xa5\x64\x77\xdb\x43\x59\x8a\x6b\x8f\xb7\xc1\x1f\x0a\xb2\xec\xd6\x88\x79\xf7\x22\x45\xfe\x6a\x62\x7a\xca\xcd\x96\x66\xd0\x6f\x46\x23\x6b\x93\x2f\xe5\x2b\xb3\x10\x66\x38\x11\xac\x4d\x1e\xd2\x9a\x98\xbf\x1e\xdb\xa3\x51\x1a\x45\xd7\x64\x90\xd6\x26\x4f\x6f\x99\x63\xb7\xff\xf4\x8e\x39\xc2\x4f\xa5\xaa\x29\x07\x3e\x09\xcc\x68\x8d\xee\x32\x03\x2b\x00\xe0\x47\x9d\x9e\x50\xa7\xa7\xef\x21\xfd\x25\x64\x0b\xbf\x6b\xed\xb1\x40\xf2\xb1\x7d\x1c\x9a\x8c\xf9\x9c\x50\xa9\xac\xc4\x7d\x3b\x34\x59\x72\xf8\xf6\xb9\x33\xf4\x27\x84\x52\x93\x33\x0b\x16\xc2\x7b\x1e\xe8\xf7\x04\x95\x11\xee\xa7\x9f\x70\xb0\xa6\x16\xbb\x3d\xee\xa6\xf5\xf3\xf2\x68\xda\x5d\x43\x59\x8e\xa7\xa0\x2b\xb4\x89\xb7\xc3\xdd\xd2\xb7\x4e\x3b\x33\xdd\x37\x07\x88\xe9\x74\xe3\x3c\x93\x5d\xd6\x0b\x6f\x84\x0f\x64\x64\x49\x03\x82\x26\x82\xec\xc7\x26\xc7\x28\x54\xd7\xe4\xbe\xd5\x51\xa8\x6c\x2d\x83\x5f\xab\x13\x0f\x4b\x0e\x9f\x54\x56\xca\xc8\xaf\xe5\x54\x90\x9e\x77\x9e\x9b\x6a\xde\x1b\x99\xfe\xa7\x1f\x4f\xd9\xbb\x68\xd7\x97\x92\x86\x97\x05\x7e\x0b\xfe\xb8\x86\xc7\xe8\xd3\x6a\x1e\x8f\xff\x6b\x37\xb1\xdb\xd6\x05\x10\x7b\x77\xde\x96\xed\x7d\x9a\xfd\x92\x7d\x98\xe0\x7f\x47\xfa\x66\xad\x2c\x94\x46\x19\xa3\x77\xa3\xa7\xd3\xe6\x95\x02\x18\xf3\xf4\x1d\x0b\xbc\x09\x2e\xe9\x42\x23\xd8\x71\x46\xc6\xb1\xd9\x28\xe9\xf9\x94\xa7\x86\x64\xab\xb3\x6b\xc3\xbb\x7c\x03\x37\x69\xfd\x65\x6d\x4e\x32\x17\x36\x5e\x8d\xbf\x98\xcb\x07\x50\x6f\x95\x75\xa0\x5a\xf5\xb4\x7e\x01\x37\x29\x20\xa7\x8a\x0c\xc9\xb3\x33\x46\x49\x43\x24\x58\xfc\x0d\x00\x00\xff\xff\xfe\x75\x61\x17\xfe\x04\x00\x00")

func templatesMapGoTBytes() ([]byte, error) {
	return bindataRead(
		_templatesMapGoT,
		"templates/map.go.t",
	)
}

func templatesMapGoT() (*asset, error) {
	bytes, err := templatesMapGoTBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/map.go.t", size: 1278, mode: os.FileMode(420), modTime: time.Unix(1483615591, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/list.go.t": templatesListGoT,
	"templates/map.go.t": templatesMapGoT,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"list.go.t": &bintree{templatesListGoT, map[string]*bintree{}},
		"map.go.t": &bintree{templatesMapGoT, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

