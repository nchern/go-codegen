package code

import (
	"fmt"
	"io"
	"io/ioutil"
	"strings"
	"unicode"
)

const (
	appName = "go-codegen"
	repoURL = "https://github.com/nchern/go-codegen"

	// PackageMain contains package main declaration string
	PackageMain = "package main\n"
)

// Generator defines interface that generates sources
type Generator interface {
	Generate(io.Writer) error
}

type bannerPrinter struct {
	decorated Generator
}

func (g *bannerPrinter) Generate(w io.Writer) error {
	_, err := fmt.Fprintf(w,
		"// generated by %s(%s)\n// You COULD edit this code it you really need it and know what are you doing\n\n",
		appName, repoURL)
	if err != nil {
		return err
	}

	return g.decorated.Generate(w)
}

// WrapWithBannerPrinter wraps given generator with printer
func WrapWithBannerPrinter(g Generator) Generator {
	return &bannerPrinter{decorated: g}
}

// ReadAndPreparePartialSource reads sources from a givven reader and prepends a package declaration if needed
func ReadAndPreparePartialSource(r io.Reader) (string, error) {
	srcBytes, err := ioutil.ReadAll(r)
	if err != nil {
		return "", err
	}
	src := string(srcBytes)
	if !strings.HasPrefix(src, "package ") {
		src = PackageMain + src
	}
	return src, nil
}

func ToPackageVisibleIdentifier(name string) string {
	isFirst := true
	return strings.Map(
		func(r rune) rune {
			if isFirst {
				isFirst = false
				return unicode.ToLower(r)
			}
			return r
		},
		name)
}
