// Code generated by go-bindata.
// sources:
// pkg/generic/list/list.go
// pkg/generic/set/set.go
// pkg/generic/typedmap/typedmap.go
// pkg/generic/iterator/iterator.go
// DO NOT EDIT!

package generic

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _listListGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x4d\x6f\xdb\x38\x10\x3d\x8b\xbf\x82\xcd\x61\x21\x15\x8a\x92\x5e\x83\xe4\x10\x2c\xd6\x8b\x02\xe9\xa2\x88\xb3\xdd\x43\x11\x2c\x14\x99\x4a\xd8\xd0\xa4\x41\x52\xee\x7a\x03\xff\xf7\x82\x1f\x12\x29\x89\x94\x3f\xe2\x93\x2d\x72\x66\xde\x9b\xe1\x90\xf3\x56\x65\xf5\x5a\x3e\x23\x48\xb0\x90\x00\xe0\xe5\x8a\x71\x09\x53\x90\x9c\x09\xc6\xe5\x99\xfa\xdd\xd0\xea\x0c\x64\x00\xc8\xcd\x0a\xc1\x87\x4b\x28\x24\xc7\xf4\xb9\xfb\xfe\xca\xd1\x02\x57\xa5\x44\xb0\x6e\x68\x95\x3e\x5c\x66\xf0\x89\x31\xd2\xed\x7f\xc3\x02\x4b\xc6\xcd\x2e\x86\x98\xca\x1c\xae\x4b\x02\x47\x86\x77\x48\x88\x59\x43\x2b\x63\x59\x63\x2e\x64\x0e\x05\xaa\x18\x5d\x04\x8c\xb1\x90\x2a\x16\xe2\x75\x59\x21\xf8\x06\x92\x19\x26\x12\xf1\xb4\xf6\x29\x65\xd6\x12\x24\x9f\xc3\xdb\xd7\xe7\xd5\x4b\x49\xe1\xc3\x25\x48\x3e\xab\xed\xde\xca\x1f\x65\xf5\x92\xae\x2d\xfd\x2e\x11\x17\xf3\x4f\x24\x4d\x42\x99\x36\xbf\xa5\x9b\x61\x78\x4d\x39\xb9\x25\x24\xbc\x31\xc3\x74\x31\x53\x79\xf6\xb7\x73\xb8\x40\x75\xd9\x10\xf9\xcd\x96\x49\x45\x57\xb6\x77\xe5\x5e\xa6\x77\x88\xa6\x99\xe2\x05\x92\xf9\xcf\x72\x95\xe2\x1c\xfe\xd0\x34\x41\x32\x67\x5c\xa6\x4f\x1b\x5d\x66\x57\x71\x97\xd2\xef\x84\x51\x94\xba\xef\x79\x9b\x62\x77\x66\x20\xb9\x5d\xad\x10\x5d\xa4\x58\xa2\xa5\x80\x45\x51\xe8\xc5\xaf\x1c\x85\x56\xd9\x2a\x1d\x13\xdc\xda\x53\x7c\x2a\x05\xb2\x27\x29\x24\x6f\x2a\xa9\x8e\x51\xf5\x21\xfc\xfe\x68\xcc\x54\x27\xc0\xbf\xd0\x4f\x63\xd5\xf1\x52\x76\x1c\xc9\x86\x53\xb7\x39\xe3\x6c\x39\x27\xb8\x42\xa9\x72\x7e\xdb\x16\x45\x91\x8d\x43\x38\x2b\x9f\xa8\x17\x96\xc0\xab\x1b\xb8\x2c\x5f\x4d\x98\x1c\x12\x44\x8d\x69\x96\x81\xa4\x62\xab\x4d\x4a\x72\x68\x16\x3a\x0e\xbf\xb9\x44\xde\x14\xfd\x2b\x48\xb6\x3e\xf4\x7c\x43\x2b\xce\x28\xfe\x1f\x2d\x6c\x22\xa7\x00\xc7\x94\x22\xae\x1c\x82\xf0\x1d\x37\x75\x7d\xed\xa6\xf6\xb8\x82\xfa\xc7\x11\x4c\x09\xfc\xe8\x22\x64\x70\xea\x1e\x99\xc2\x8b\x86\xc8\x30\xb0\x29\xfd\x16\x24\x35\xe3\xf0\xdf\x1c\xae\x95\x19\x2f\xa9\x7a\x5f\x0a\x62\x03\x24\xb8\x86\x75\xba\xce\xf4\x7f\x1b\xce\x6c\xde\xc0\xd2\xf4\x96\xb7\x98\xc3\x75\x06\x92\x64\x0b\x12\x97\x94\xd9\x8e\x66\xb0\xeb\xae\xbb\x2c\x44\x57\x70\xbb\x95\x81\xe4\x99\x99\x07\xc8\xf0\x9b\x4c\xa4\x9f\x49\x17\xf3\xfa\x1c\xae\xd5\xc2\xd6\xf0\x4e\x2a\xc2\x04\xb2\x39\xa9\x93\xdb\xa6\x19\x18\xe4\x22\xe2\xc9\x0c\x9e\xa5\xd3\x91\x1f\xd0\x7d\x37\xd3\xe9\xe7\x52\x61\x2a\x3e\x78\xa2\x2b\x3e\x58\x6f\xf5\x62\xb9\xfe\xd0\xe0\x64\xd8\x03\x24\xca\xa3\xf7\x2c\x7b\x4f\x85\xc1\xfa\x8e\x1f\xa3\x9e\x91\x17\xbc\xa5\xbe\x6f\x43\x6b\x34\xc9\x1b\x34\xe4\x5c\x97\x44\xa0\x38\x7a\x78\x4c\xec\x83\xfe\x61\x04\x6f\xa0\x06\xf8\x9a\x53\xfc\xde\xef\x3b\x8c\x8e\xaa\xc7\x7a\x48\xc6\x85\x9d\xa4\xb4\xd7\xcc\x33\x8c\x1a\xba\x50\x74\xbc\xc0\x07\xd0\x34\xee\x37\x63\x9e\x7a\x43\x51\xbc\xb8\x80\x33\xc6\xa1\xd2\x45\x11\xbe\xdd\xe0\xf5\xbb\x0e\xd1\xd4\x60\x66\xd1\x3c\xfb\x53\x5a\x4f\x82\xb6\x57\xf3\xb6\x6d\x7f\x3c\xc2\x1b\xf7\x3f\xdf\xa3\x9b\xa7\x67\xbd\x42\x51\xa9\xd8\x19\x62\x16\xe7\x7a\xe1\x8d\xe4\xd0\xf8\x6d\x8d\x4d\xa1\x43\x19\x6b\xef\x41\x88\x1f\x5c\x5f\x46\x28\xa8\x8a\xad\x30\x5a\x04\xe6\x9b\xad\x4d\x3b\xe0\x8c\x5d\x9b\x9e\x06\x53\x4e\x81\x01\x6e\x2c\xf5\x98\x77\x4f\x94\x3d\xa7\x2f\x8d\x2c\x25\xe3\x22\x56\x99\x91\xaa\xe9\xd5\x5c\x75\xc1\x44\x57\x06\xf4\x8f\x73\x77\x33\x8c\xd8\xf1\xa5\xed\x7a\x6a\x64\x18\x30\xa4\x9d\x42\x11\xf5\x7e\x5b\x9a\xe9\x88\x21\xdd\xa5\x42\xe2\xda\x2f\x3a\xbc\x86\x9f\x74\xf7\x8f\xaf\x64\xb2\x05\xfe\xa8\xb7\xb5\xf1\x7c\xcf\x3f\x3d\x02\x8f\xa2\x35\xb8\x1a\x59\x8c\x46\xf6\xc5\x85\xa2\x77\x8f\x9f\x5f\x64\x4f\xcd\x9b\xde\xf3\x94\xa0\x97\x11\x48\x88\x6a\x5f\xea\xf5\xb1\xcb\x5d\xc0\x8f\x7e\x04\x75\x0d\x85\xf0\xae\x53\xfb\x88\x5a\x26\xa2\x30\xb1\x52\xe1\xee\x98\x68\xef\x55\xd6\x89\x53\xa7\x9b\x3c\x4a\x46\x73\xf9\xc4\x40\xb2\x6c\x24\xfa\x4f\x9b\x17\xf7\xff\x7c\x51\x1f\xbd\x63\x71\x71\x76\x4b\x2b\x52\xe8\x60\xc5\xfd\x1d\xab\x5e\xd3\xcc\xf6\x3e\x29\x34\x6c\xd1\x7a\x67\x9e\xe1\xdf\x94\xb4\xa6\xde\x0d\x08\x82\x9f\x52\x15\x8d\x88\x06\x1f\x5a\x43\xfb\x50\xb5\x14\xc8\xed\x70\x5d\xd2\x4b\xfc\x1d\x0a\xea\xb8\x44\x03\xca\xea\xe4\x59\xed\x56\x5b\x23\xee\x2d\x51\xdf\x75\xb2\x99\x48\x14\x7d\xa4\xb1\x46\x60\x6b\xbf\x75\xb5\xf9\x24\xd4\x3a\x0a\x35\x21\xca\xa6\xef\x8b\x76\x3c\xf2\xb2\x4c\x68\xb1\x1d\xa0\xca\xf1\x48\xd0\xc3\x14\xd8\xae\xc7\xa2\x8b\xe5\xfb\xbf\x83\xd9\xde\x42\x6c\x37\x31\x13\xea\x04\xbc\x7a\x82\x6b\x1a\x57\x9b\x1e\x87\x62\xe4\x99\xd1\x0b\xbe\x44\x33\x91\x86\xb7\xab\x13\x73\x1e\x5a\x07\x16\x85\xd8\xa9\xd5\xa2\x70\xce\x33\x04\xb8\xfb\x2a\x8f\xb5\xda\x74\x21\xad\xfd\x91\xa5\x8c\x28\xaf\x48\x6e\xca\x5a\x5b\x1e\x52\xcb\xa8\x3e\x0b\x83\xf8\xe6\x5a\x54\xed\x8f\x14\x17\x6e\x61\xa8\x9e\xfd\xa1\x58\x31\x49\x37\x04\xeb\x1d\x56\xdf\x6b\xaa\x41\xd4\x99\xfd\x0a\x00\x00\xff\xff\xfe\x58\xb8\xc1\x0c\x16\x00\x00")

func listListGoBytes() ([]byte, error) {
	return bindataRead(
		_listListGo,
		"list/list.go",
	)
}

func listListGo() (*asset, error) {
	bytes, err := listListGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "list/list.go", size: 5644, mode: os.FileMode(420), modTime: time.Unix(1552787926, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _setSetGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x52\x4d\x8b\x1b\x31\x0c\x3d\x5b\xbf\x42\xa7\x62\x97\xac\xc9\x79\xd9\x14\x4a\x4f\x85\xd2\x43\x37\x3d\x85\x50\x6c\x47\x49\x87\x1d\xdb\xc1\xf6\xa4\x13\x86\xf9\xef\x45\xce\xe4\x83\x76\xa0\xf4\x66\x0b\xbd\xf7\xf4\xf4\x74\x34\xee\xcd\x1c\x08\x33\x15\x80\x72\x3e\x12\xae\x97\x98\x4b\x6a\xc2\xe1\xf6\x7f\xa5\xc2\xa5\xce\x15\x1c\x40\x78\xf4\xe6\xb8\x59\x2f\xb7\x36\xc6\x16\x46\x80\x7d\x17\x1c\x7e\xa5\x5f\xb5\x51\x9e\x4c\x9b\x51\x6b\xbd\x5e\x2a\x7c\x7f\xc1\x0e\x20\x12\x65\x7c\x5e\xe1\xbb\x5a\x18\xfc\xf3\x23\xc7\x30\x8e\xb5\x41\x7f\xdc\xed\x2a\x5c\x6b\xad\xb8\x52\xba\x14\x30\x51\xbe\x89\xc8\x3c\x51\x2a\xbc\xf6\x5e\xa5\x06\x10\xfb\x98\xf0\xc7\x02\x4f\x2c\x94\x4c\x38\x10\xd6\x86\x01\x84\xc8\xda\x6f\x4e\x5b\x5c\x61\x49\x1d\x81\x18\xe7\x18\xbf\x91\x8f\x27\x92\x3d\x4e\x74\x3b\x6a\xa9\x90\xcc\xda\x2f\xb0\x57\x73\x88\x2f\x14\xa4\xc2\x26\x4c\x0e\xeb\xb8\x2d\x05\x86\xcc\xf6\x7f\x8a\xa1\x98\x26\xe4\x49\x83\xbd\x3f\x20\x79\xc6\x7e\x3b\xeb\xb5\x6d\xa5\xc2\x97\x27\xf7\xd3\x04\x8e\x67\x00\xe1\xd8\xa4\x37\x6f\x24\xa7\xa2\x02\x71\x88\xc8\x48\x59\xa7\xaf\xdb\xe8\xef\xab\xc8\xda\xd7\xb2\x70\xf8\xf2\x84\x3d\x08\x31\x82\x10\xae\x8d\x99\xa4\x53\x20\x46\x79\x5f\xb9\x9b\x1b\xe2\x7b\x68\x62\x90\xf6\xf6\xbf\x67\xfb\x87\x92\x9d\x94\x2e\x79\xf6\xcc\x7d\xf7\x38\xc7\xfc\xda\xd9\x92\x8c\x2b\xff\x47\x7e\x8d\xeb\xdf\xfc\x9f\x43\xa1\x94\xc9\x15\x79\x9e\x11\x30\x4c\x9e\xb5\x07\x61\xf9\x75\xe6\x57\xb3\xaf\x39\x1a\x85\x1f\xea\xc3\x5e\x56\x6a\x16\x68\x71\x85\x76\x81\x66\x12\xcd\xb7\x18\x1e\xee\x59\xfd\x35\xb5\xa9\xf0\x66\x8f\x76\xd3\x6f\x2f\x31\x24\xca\xfc\xbe\x5e\x24\xd3\x8d\xc0\x77\x8a\xab\x7a\xf2\x8f\x8e\x7e\x07\x00\x00\xff\xff\xc8\x85\x69\x4d\xa4\x03\x00\x00")

func setSetGoBytes() ([]byte, error) {
	return bindataRead(
		_setSetGo,
		"set/set.go",
	)
}

func setSetGo() (*asset, error) {
	bytes, err := setSetGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "set/set.go", size: 932, mode: os.FileMode(420), modTime: time.Unix(1532984840, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typedmapTypedmapGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x53\xc1\x8e\x9b\x30\x10\x3d\xdb\x5f\x31\xdd\xc3\x0a\x2a\x84\x92\x6b\xa4\x9c\xaa\xaa\x97\x6e\x0f\x59\xb6\x3d\xac\x56\x95\x97\x4c\x52\x44\x6c\x90\x71\x68\x69\x94\x7f\x5f\x8d\x63\x82\x21\x40\x8e\xe0\x37\xef\xbd\x99\x79\x53\x8a\x34\x17\x7b\x04\xd3\x94\xb8\x95\xa2\xe4\x3c\x93\x65\xa1\x0d\x3c\x54\x8d\x4a\x1f\x38\xa7\x07\x48\x16\x50\x19\x9d\xa9\xbd\xfb\x5c\x42\xa6\xcc\xf5\x2d\x59\x3e\x89\xf2\x67\x56\x65\xa6\xd0\xb0\x3b\xaa\x34\x48\x16\x11\x24\xcb\x10\xde\x8b\xe2\xd0\x87\x51\x21\xea\x9d\x48\x11\x4e\x9c\x7d\x15\xe9\x9f\xa0\x76\x95\x7d\xa2\x90\xb3\x6f\x68\x82\x1c\x1b\x48\x16\x21\x04\x35\x24\xcb\x08\x76\xc5\x51\x6d\x2d\x6d\xc8\xd9\xf3\xf5\x3d\x82\x5a\x1c\x48\x91\xb3\x97\x72\x2b\x0c\x06\x95\x4e\x41\x8a\xf2\x35\x59\xbc\x91\x11\xc7\xcd\xd9\x06\x65\x51\xe3\x95\xd6\x1a\x64\x5f\x0e\x85\xc2\xa0\x43\x9d\x9d\xe7\x77\x51\x61\xeb\xbb\x32\xfa\x98\x1a\x32\xfd\x5b\x8a\xb2\xe3\x26\x30\xf5\x0c\x3f\xf0\xaf\xc3\x76\x4c\x04\xd7\x58\xc1\x6a\x0d\x8f\x1e\xd9\x89\x33\xcb\xb2\xea\x68\x4e\xe7\x88\xb3\x33\xa1\xcd\x51\x2b\xd0\x58\x8d\x10\x3f\x37\x2a\xd5\x85\xca\xfe\xe3\x76\xa8\x61\xab\x1e\x69\x67\x9e\x46\xa6\x14\xea\x55\xcf\x99\x55\x69\x99\x03\x09\x9f\x3d\x5b\x21\xcc\x4f\x9c\x94\xea\xf6\xcf\x1a\x64\x4c\x3d\xbc\xe6\xd8\xbc\xb5\x0e\xa6\x99\xe7\x36\x4d\xbc\xbb\x42\x43\x1e\x41\x4d\xa3\xd2\x42\xed\xd1\xd1\x83\xed\x63\x07\x9f\x5c\x6d\x40\x20\x5b\xc1\x5a\x4d\x46\x73\x9b\x69\x6a\x24\x26\x54\xef\xd9\x87\x35\x3d\x4c\x33\xcc\x66\x6a\xdc\x3d\x61\xc9\x64\xab\x62\x35\xfc\x0d\xcb\x69\xb9\x91\x8c\xda\xdc\xb5\xa3\x5f\x0d\x66\xbf\xc5\x03\x1a\x0c\x2e\xff\x22\xc8\xb1\x09\xf9\x55\xc7\x96\x4c\x6b\x0d\xa2\xef\x05\xd6\x4f\xcd\x9d\xfd\x68\xac\x62\x3b\x65\xda\x0d\x35\x39\xcc\xb1\xbd\x26\x2f\x9c\xde\x35\xd9\x8c\x5e\x2f\x8f\x33\x79\x34\xf8\xcf\x62\xe3\xcd\xaf\x27\xfa\xe8\x99\xf7\x48\xee\x87\x4a\xc6\x96\x2d\xde\x7c\x2f\xd2\x9c\xba\x90\xb1\x95\x8b\xfd\xc2\xd0\xc3\xbd\xa8\xc3\x05\x39\x29\x79\xff\x42\x6e\x44\x7b\x27\x73\xd1\x77\x2c\xa3\xd2\x63\xa7\xd4\xb3\x30\x99\xe7\x0b\xd3\xb0\x57\x07\xb7\x58\x4f\xf0\x7e\xab\x77\x53\x3f\xa5\xd8\x15\x8e\xe9\x4d\x5c\x40\x4f\x7a\xe2\x02\x86\x82\xde\x39\x5c\x94\xbb\xba\x59\xe5\xdb\x9b\xe8\xa9\x8f\xdc\xc4\xcd\x52\xb5\x2f\xeb\x0a\x66\xb6\x09\x9a\x9f\xf9\x47\x00\x00\x00\xff\xff\x7d\x73\x04\x86\x6c\x07\x00\x00")

func typedmapTypedmapGoBytes() ([]byte, error) {
	return bindataRead(
		_typedmapTypedmapGo,
		"typedmap/typedmap.go",
	)
}

func typedmapTypedmapGo() (*asset, error) {
	bytes, err := typedmapTypedmapGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "typedmap/typedmap.go", size: 1900, mode: os.FileMode(420), modTime: time.Unix(1552784763, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _iteratorIteratorGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\xc1\x4e\xc3\x30\x0c\x86\xcf\xf1\x53\xfc\x27\x94\x20\x86\x7a\x9e\xb6\x23\x20\x2e\x9c\xfa\x02\x51\xe4\x86\x6a\x90\x4e\x9e\x2b\x81\xaa\xbe\x3b\x72\xd7\x56\x65\xda\x31\xf1\xff\xd9\x9f\x7d\x8e\xe9\x14\x33\xa3\x55\x96\xa8\x9d\x10\xe9\xef\x99\x51\x57\xb8\xa8\xb4\x25\xaf\xef\x37\x2e\xd7\xc4\x6b\x5f\x12\x9a\xbe\x24\x9f\x97\x2f\xa4\xcf\x58\x0e\x3b\xd4\x55\x00\x8b\x6c\xba\xbc\x2b\x0b\xda\xa2\x2c\x4d\x4c\x8c\x81\xdc\x8b\x88\x5f\x52\xee\x83\x7f\xd4\x07\x1c\x76\xd6\x00\x75\x45\xe3\x4c\x9a\x8e\x19\xf4\x49\x0d\x62\x11\x2c\xcc\x54\xda\xe4\x4d\x05\xbe\xc5\xa3\x15\x02\x36\xfd\x8d\x14\xd6\x5e\x0a\xda\x67\x16\xb9\x93\xbe\x15\xf8\x87\x58\x64\x65\xe6\xfd\xd9\x37\xb7\xc7\x08\xcb\x9e\x03\xb9\xcc\x05\xfb\x23\x1e\x0c\x1d\xc8\x4d\xb2\x7b\x7c\xc7\x13\xfb\x79\x42\x78\x22\x37\x12\xb9\xdc\x5d\x8f\x18\x0c\x33\xce\x0c\x71\x44\x63\x67\x9d\x46\x07\x72\x2e\x7d\x75\x17\xde\xfe\x8c\x3e\xd0\xaa\x98\xb9\xd0\x48\x7f\x01\x00\x00\xff\xff\xbf\x0c\x9c\xe7\xc3\x01\x00\x00")

func iteratorIteratorGoBytes() ([]byte, error) {
	return bindataRead(
		_iteratorIteratorGo,
		"iterator/iterator.go",
	)
}

func iteratorIteratorGo() (*asset, error) {
	bytes, err := iteratorIteratorGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "iterator/iterator.go", size: 451, mode: os.FileMode(420), modTime: time.Unix(1532984840, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"list/list.go": listListGo,
	"set/set.go": setSetGo,
	"typedmap/typedmap.go": typedmapTypedmapGo,
	"iterator/iterator.go": iteratorIteratorGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"iterator": &bintree{nil, map[string]*bintree{
		"iterator.go": &bintree{iteratorIteratorGo, map[string]*bintree{}},
	}},
	"list": &bintree{nil, map[string]*bintree{
		"list.go": &bintree{listListGo, map[string]*bintree{}},
	}},
	"set": &bintree{nil, map[string]*bintree{
		"set.go": &bintree{setSetGo, map[string]*bintree{}},
	}},
	"typedmap": &bintree{nil, map[string]*bintree{
		"typedmap.go": &bintree{typedmapTypedmapGo, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

