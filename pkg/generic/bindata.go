// Code generated by go-bindata.
// sources:
// pkg/generic/list/list.go
// pkg/generic/set/set.go
// pkg/generic/hashmap/hashmap.go
// pkg/generic/iterator/iterator.go
// pkg/generic/converter/converter.go
// DO NOT EDIT!

package generic

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _listListGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x4d\x6f\xdb\x38\x10\x3d\x8b\xbf\x82\xcd\x61\x21\x15\x8a\x92\x5e\x83\xe4\x10\x2c\xd6\x8b\x02\xe9\xa2\x88\xb3\xdd\x43\x11\x2c\x14\x99\x4a\xd8\xd0\xa4\x41\x52\xee\x7a\x03\xff\xf7\x82\x1f\x12\x29\x89\x94\x3f\xe2\x93\x2d\x72\x66\xde\x9b\xe1\x90\xf3\x56\x65\xf5\x5a\x3e\x23\x48\xb0\x90\x00\xe0\xe5\x8a\x71\x09\x53\x90\x9c\x09\xc6\xe5\x99\xfa\xdd\xd0\xea\x0c\x64\x00\xc8\xcd\x0a\xc1\x87\x4b\x28\x24\xc7\xf4\xb9\xfb\xfe\xca\xd1\x02\x57\xa5\x44\xb0\x6e\x68\x95\x3e\x5c\x66\xf0\x89\x31\xd2\xed\x7f\xc3\x02\x4b\xc6\xcd\x2e\x86\x98\xca\x1c\xae\x4b\x02\x47\x86\x77\x48\x88\x59\x43\x2b\x63\x59\x63\x2e\x64\x0e\x05\xaa\x18\x5d\x04\x8c\xb1\x90\x2a\x16\xe2\x75\x59\x21\xf8\x06\x92\x19\x26\x12\xf1\xb4\xf6\x29\x65\xd6\x12\x24\x9f\xc3\xdb\xd7\xe7\xd5\x4b\x49\xe1\xc3\x25\x48\x3e\xab\xed\xde\xca\x1f\x65\xf5\x92\xae\x2d\xfd\x2e\x11\x17\xf3\x4f\x24\x4d\x42\x99\x36\xbf\xa5\x9b\x61\x78\x4d\x39\xb9\x25\x24\xbc\x31\xc3\x74\x31\x53\x79\xf6\xb7\x73\xb8\x40\x75\xd9\x10\xf9\xcd\x96\x49\x45\x57\xb6\x77\xe5\x5e\xa6\x77\x88\xa6\x99\xe2\x05\x92\xf9\xcf\x72\x95\xe2\x1c\xfe\xd0\x34\x41\x32\x67\x5c\xa6\x4f\x1b\x5d\x66\x57\x71\x97\xd2\xef\x84\x51\x94\xba\xef\x79\x9b\x62\x77\x66\x20\xb9\x5d\xad\x10\x5d\xa4\x58\xa2\xa5\x80\x45\x51\xe8\xc5\xaf\x1c\x85\x56\xd9\x2a\x1d\x13\xdc\xda\x53\x7c\x2a\x05\xb2\x27\x29\x24\x6f\x2a\xa9\x8e\x51\xf5\x21\xfc\xfe\x68\xcc\x54\x27\xc0\xbf\xd0\x4f\x63\xd5\xf1\x52\x76\x1c\xc9\x86\x53\xb7\x39\xe3\x6c\x39\x27\xb8\x42\xa9\x72\x7e\xdb\x16\x45\x91\x8d\x43\x38\x2b\x9f\xa8\x17\x96\xc0\xab\x1b\xb8\x2c\x5f\x4d\x98\x1c\x12\x44\x8d\x69\x96\x81\xa4\x62\xab\x4d\x4a\x72\x68\x16\x3a\x0e\xbf\xb9\x44\xde\x14\xfd\x2b\x48\xb6\x3e\xf4\x7c\x43\x2b\xce\x28\xfe\x1f\x2d\x6c\x22\xa7\x00\xc7\x94\x22\xae\x1c\x82\xf0\x1d\x37\x75\x7d\xed\xa6\xf6\xb8\x82\xfa\xc7\x11\x4c\x09\xfc\xe8\x22\x64\x70\xea\x1e\x99\xc2\x8b\x86\xc8\x30\xb0\x29\xfd\x16\x24\x35\xe3\xf0\xdf\x1c\xae\x95\x19\x2f\xa9\x7a\x5f\x0a\x62\x03\x24\xb8\x86\x75\xba\xce\xf4\x7f\x1b\xce\x6c\xde\xc0\xd2\xf4\x96\xb7\x98\xc3\x75\x06\x92\x64\x0b\x12\x97\x94\xd9\x8e\x66\xb0\xeb\xae\xbb\x2c\x44\x57\x70\xbb\x95\x81\xe4\x99\x99\x07\xc8\xf0\x9b\x4c\xa4\x9f\x49\x17\xf3\xfa\x1c\xae\xd5\xc2\xd6\xf0\x4e\x2a\xc2\x04\xb2\x39\xa9\x93\xdb\xa6\x19\x18\xe4\x22\xe2\xc9\x0c\x9e\xa5\xd3\x91\x1f\xd0\x7d\x37\xd3\xe9\xe7\x52\x61\x2a\x3e\x78\xa2\x2b\x3e\x58\x6f\xf5\x62\xb9\xfe\xd0\xe0\x64\xd8\x03\x24\xca\xa3\xf7\x2c\x7b\x4f\x85\xc1\xfa\x8e\x1f\xa3\x9e\x91\x17\xbc\xa5\xbe\x6f\x43\x6b\x34\xc9\x1b\x34\xe4\x5c\x97\x44\xa0\x38\x7a\x78\x4c\xec\x83\xfe\x61\x04\x6f\xa0\x06\xf8\x9a\x53\xfc\xde\xef\x3b\x8c\x8e\xaa\xc7\x7a\x48\xc6\x85\x9d\xa4\xb4\xd7\xcc\x33\x8c\x1a\xba\x50\x74\xbc\xc0\x07\xd0\x34\xee\x37\x63\x9e\x7a\x43\x51\xbc\xb8\x80\x33\xc6\xa1\xd2\x45\x11\xbe\xdd\xe0\xf5\xbb\x0e\xd1\xd4\x60\x66\xd1\x3c\xfb\x53\x5a\x4f\x82\xb6\x57\xf3\xb6\x6d\x7f\x3c\xc2\x1b\xf7\x3f\xdf\xa3\x9b\xa7\x67\xbd\x42\x51\xa9\xd8\x19\x62\x16\xe7\x7a\xe1\x8d\xe4\xd0\xf8\x6d\x8d\x4d\xa1\x43\x19\x6b\xef\x41\x88\x1f\x5c\x5f\x46\x28\xa8\x8a\xad\x30\x5a\x04\xe6\x9b\xad\x4d\x3b\xe0\x8c\x5d\x9b\x9e\x06\x53\x4e\x81\x01\x6e\x2c\xf5\x98\x77\x4f\x94\x3d\xa7\x2f\x8d\x2c\x25\xe3\x22\x56\x99\x91\xaa\xe9\xd5\x5c\x75\xc1\x44\x57\x06\xf4\x8f\x73\x77\x33\x8c\xd8\xf1\xa5\xed\x7a\x6a\x64\x18\x30\xa4\x9d\x42\x11\xf5\x7e\x5b\x9a\xe9\x88\x21\xdd\xa5\x42\xe2\xda\x2f\x3a\xbc\x86\x9f\x74\xf7\x8f\xaf\x64\xb2\x05\xfe\xa8\xb7\xb5\xf1\x7c\xcf\x3f\x3d\x02\x8f\xa2\x35\xb8\x1a\x59\x8c\x46\xf6\xc5\x85\xa2\x77\x8f\x9f\x5f\x64\x4f\xcd\x9b\xde\xf3\x94\xa0\x97\x11\x48\x88\x6a\x5f\xea\xf5\xb1\xcb\x5d\xc0\x8f\x7e\x04\x75\x0d\x85\xf0\xae\x53\xfb\x88\x5a\x26\xa2\x30\xb1\x52\xe1\xee\x98\x68\xef\x55\xd6\x89\x53\xa7\x9b\x3c\x4a\x46\x73\xf9\xc4\x40\xb2\x6c\x24\xfa\x4f\x9b\x17\xf7\xff\x7c\x51\x1f\xbd\x63\x71\x71\x76\x4b\x2b\x52\xe8\x60\xc5\xfd\x1d\xab\x5e\xd3\xcc\xf6\x3e\x29\x34\x6c\xd1\x7a\x67\x9e\xe1\xdf\x94\xb4\xa6\xde\x0d\x08\x82\x9f\x52\x15\x8d\x88\x06\x1f\x5a\x43\xfb\x50\xb5\x14\xc8\xed\x70\x5d\xd2\x4b\xfc\x1d\x0a\xea\xb8\x44\x03\xca\xea\xe4\x59\xed\x56\x5b\x23\xee\x2d\x51\xdf\x75\xb2\x99\x48\x14\x7d\xa4\xb1\x46\x60\x6b\xbf\x75\xb5\xf9\x24\xd4\x3a\x0a\x35\x21\xca\xa6\xef\x8b\x76\x3c\xf2\xb2\x4c\x68\xb1\x1d\xa0\xca\xf1\x48\xd0\xc3\x14\xd8\xae\xc7\xa2\x8b\xe5\xfb\xbf\x83\xd9\xde\x42\x6c\x37\x31\x13\xea\x04\xbc\x7a\x82\x6b\x1a\x57\x9b\x1e\x87\x62\xe4\x99\xd1\x0b\xbe\x44\x33\x91\x86\xb7\xab\x13\x73\x1e\x5a\x07\x16\x85\xd8\xa9\xd5\xa2\x70\xce\x33\x04\xb8\xfb\x2a\x8f\xb5\xda\x74\x21\xad\xfd\x91\xa5\x8c\x28\xaf\x48\x6e\xca\x5a\x5b\x1e\x52\xcb\xa8\x3e\x0b\x83\xf8\xe6\x5a\x54\xed\x8f\x14\x17\x6e\x61\xa8\x9e\xfd\xa1\x58\x31\x49\x37\x04\xeb\x1d\x56\xdf\x6b\xaa\x41\xd4\x99\xfd\x0a\x00\x00\xff\xff\xfe\x58\xb8\xc1\x0c\x16\x00\x00")

func listListGoBytes() ([]byte, error) {
	return bindataRead(
		_listListGo,
		"list/list.go",
	)
}

func listListGo() (*asset, error) {
	bytes, err := listListGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "list/list.go", size: 5644, mode: os.FileMode(420), modTime: time.Unix(1573317568, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _setSetGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\xb1\x6e\xdb\x30\x14\x9c\xc9\xaf\xb8\xa9\x90\x0a\x47\xf1\x1c\xc4\x05\x82\x4e\x01\x82\x0e\x8d\x3b\x05\x46\x41\x51\x4f\x36\x11\x8a\x14\x48\xda\xb1\x61\xf8\xdf\x0b\x52\x94\xec\xb4\xf6\xd0\xc9\x4f\x34\xef\xde\xbd\x7b\x27\xf5\x42\xbe\x8b\x35\xc1\x53\xe0\xfc\xfe\x1e\xcb\x39\x94\x87\xc0\x9a\x0c\x39\x25\xb1\x13\x4e\x89\x5a\x13\xc2\xa1\x27\xf4\x5a\x48\xda\x58\xdd\x90\x83\x6d\x21\x22\x0c\xa4\xa9\x23\x13\x2a\x3c\x07\x7c\x28\xad\x61\x6c\x80\xe8\x7b\x12\x0e\xca\x20\x6c\x68\x60\x13\x81\x1a\x48\xdb\x10\x4f\x5c\xcb\x39\x7c\x70\xca\xac\x73\xdf\x57\x0a\x70\xd4\x3b\xf2\x64\x82\xcf\xdc\xb6\x8d\xf7\x72\x07\x3f\x02\xe3\x55\x1f\xdc\x56\x06\x1c\x39\xeb\xd0\x89\xfe\x6d\x39\x5f\xd5\xd6\x6a\x7e\x4a\x74\x3f\xe8\x63\xb8\x26\x1d\x89\x40\x1e\xc2\x40\x19\x1f\x84\x91\x34\x90\xc6\x3f\x3f\x54\xd8\x60\xad\x76\x64\xce\x2d\xda\xad\x91\x13\xbc\xd8\x09\xed\x51\x55\xd5\x72\x5e\xe2\xeb\x00\x3a\x72\xe6\xc8\xe3\x61\x81\x2f\xe9\xe0\xd8\x3d\x5c\x0a\x38\x9e\x4e\xe9\x42\xf5\xd4\x34\x09\x5e\x55\x55\x19\x4f\xc2\xd6\x19\x38\xf2\x59\xe1\x53\xd3\x40\x34\x4d\x52\x96\x9b\x23\xd8\x61\xec\x41\x44\xe1\x73\xcb\x12\x23\xd7\x28\xe5\xc8\x59\x6b\x1d\x7e\xcf\xb0\x8b\x42\x9c\x30\x6b\x42\xba\x70\xe4\x8c\xf9\xaa\x7b\xdb\xad\xb0\x40\x70\x5b\xe2\xec\x94\x3b\xfe\xa4\xce\xee\x08\x2e\xfd\x7c\xea\xdb\x3a\xdb\xdd\xe8\x3c\x80\x8a\x3d\x72\xdb\x86\x34\x05\x2a\x7c\xd5\xcd\xb0\x2f\x33\xf3\x0b\xc5\xc9\xe2\x80\x7e\x32\x12\x66\xdb\xd5\x34\x25\xe0\x1a\xf7\x0b\x99\xa2\x84\x32\xd9\xd3\x64\x90\x26\x13\xc9\x47\xe6\xef\xd6\x04\xa1\x8c\x87\xdc\x90\x7c\xf7\x50\x31\x74\x9f\x36\x86\x9a\xb4\x35\x6b\x7f\xdb\xbc\x91\x23\x0f\x11\x97\x74\xd1\x30\x9a\xb5\x5f\x8d\x4b\xd1\x7a\x1a\x44\x40\x6e\x84\x31\xa4\xa1\x42\x0c\xaf\x75\xb0\x3b\x72\x08\x1b\xe5\xaf\x2f\x49\xeb\xa2\xc4\xe3\x5d\x84\xc5\xd4\x1e\x39\x93\x71\x3b\x9d\x78\xa7\x22\x1f\x96\x9c\xad\x2d\x22\xb2\x48\x76\xa6\x35\xee\xcf\x3b\xf4\x55\x97\x8e\x99\xc4\xe3\x1d\xf6\x9c\xb1\x13\x67\x4c\x6a\xeb\xa9\x90\x25\x67\xa7\xe2\x9c\x25\x99\x45\xff\x32\xca\x9a\xf8\xc2\x69\x45\x1e\xdb\xf4\x64\xfb\x28\x39\x56\xc1\x4e\x8a\x21\x4c\x33\xd9\x77\x6d\x82\xc4\x54\xd4\xd3\xf3\x39\xf1\x7f\xc9\xac\xb3\xcc\x21\xe5\xfb\x28\xec\x6c\x68\x96\xf5\xba\xad\x83\x13\x32\xc0\xe7\xc2\xa3\x1e\x92\x76\xd3\xc1\x11\xf2\x7f\x12\xc6\x88\x5e\x55\xf1\x6c\x02\x39\x4f\x32\xa0\x55\xa6\xf1\x31\x6d\xc3\x73\x72\xa9\xc5\x21\x99\x72\x53\xd1\x04\x2f\x0e\x57\x24\x89\x28\xc7\x57\x1d\x67\x75\xac\x0e\xb1\x52\x6d\xca\xb0\x28\xf1\x2d\x15\xf5\xb0\x67\x31\x43\x8d\x05\xea\x19\x44\x96\xe9\xa7\x6c\x5c\x7c\x3d\xca\x7f\xe6\x14\x09\xae\x5a\xd4\x6f\xfb\xd5\x90\x0d\x47\x3e\xd6\xe3\xfb\x1d\xe9\x4e\x3c\xbe\xf5\x58\xa4\x0f\xcc\xa5\x07\x7f\x02\x00\x00\xff\xff\x67\x26\x19\x65\xe0\x05\x00\x00")

func setSetGoBytes() ([]byte, error) {
	return bindataRead(
		_setSetGo,
		"set/set.go",
	)
}

func setSetGo() (*asset, error) {
	bytes, err := setSetGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "set/set.go", size: 1504, mode: os.FileMode(420), modTime: time.Unix(1586691949, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _hashmapHashmapGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\xc1\x6e\xe3\x36\x10\x3d\x9b\x5f\x31\xdd\xc3\x42\x2e\x0c\xd9\xbe\x06\xc8\xa9\x28\x16\x0b\x74\x7b\x48\xbc\xed\x61\xb1\x08\x68\x7a\x64\x13\x96\x48\x81\xa4\x9c\xb8\x81\xff\xbd\x98\xa1\x64\x51\x8e\x65\xa3\x3d\x25\x96\x66\xde\x7b\x33\xf3\x9e\x6a\xa9\xf6\x72\x8b\xb0\x93\x7e\x57\xc9\x5a\x08\x5d\xd5\xd6\x05\xf8\xe4\x8f\x46\x7d\x12\x62\x3e\x87\xd5\x02\xb4\x07\x09\x5b\x34\xe8\xb4\x82\x83\x74\x5a\xae\x4b\x84\x70\xac\x11\xea\x52\x2a\xdc\xd9\x72\x83\x0e\x6c\x01\x12\xf6\x78\xe4\x37\x39\x7c\x0d\xf0\xaa\xcb\x12\x8c\x0d\x20\xeb\x1a\xa5\x03\x6d\x20\xec\x30\x42\xc9\x80\x1b\x50\x76\x83\x82\x81\x56\x0b\xf0\xc1\x69\xb3\x8d\xa4\xcb\xff\x44\x7a\x90\x65\x83\xff\x8f\x76\x09\xda\x84\x76\xd0\xd5\xf2\x9b\xac\xff\xd2\x5e\x07\xeb\x22\xff\xa1\xfd\x51\x34\x46\x05\x6d\x0d\x04\x1b\x9f\x41\x25\x6b\xa8\xa5\x76\xbe\x93\x3f\x68\xa6\xfa\x6c\xb5\x98\xc1\x6a\x39\x85\xb5\xb5\x65\xca\x00\xf8\x56\x5b\x8f\x9e\x45\x29\x6b\x82\x93\x2a\xd0\x20\xf4\x9e\x80\x07\x90\xa4\x0f\x5d\x21\x15\xc2\xbb\x98\xcc\xe7\xf0\xbb\x54\xbb\x28\xc2\x03\xd2\xff\x58\x62\x85\x26\x74\x63\x56\xb2\xe6\x2d\xf8\x60\x6b\x0f\x3a\xd0\xcc\xda\x1a\x0f\xba\x18\xcc\x03\x0e\x43\xe3\x8c\x87\x42\x96\x1e\xc5\x84\x70\xb3\xae\x60\x38\xcf\x54\x30\xf3\x17\x0c\xe7\x26\x62\x8a\x6b\xe7\x0b\x6c\xf5\x01\x0d\x1d\x3f\x87\xaf\x05\xbf\x24\x23\xbc\x4a\xcf\x77\x28\x6c\x63\x36\xfc\xd4\xa3\xb2\x66\xd3\xa2\xb4\x00\x7c\xae\x35\x76\x3a\xbe\x60\xc8\xa8\x79\xb5\x98\x42\x76\x80\xd5\x72\xd6\xf6\xd3\x1e\x5b\x25\xcf\x18\xc0\x63\x18\x97\x21\x26\xcf\x67\x98\x19\x55\xd0\x25\x62\xef\xf7\x7a\x23\x03\x42\xc3\x7f\xda\x23\x34\xce\xd1\x06\xe9\xa8\x85\xb3\xd5\x19\x89\x8e\x31\x89\x0d\x99\x77\x8a\x7e\xff\x58\x2d\x7e\xd2\x55\xdb\x0d\x45\xcc\x27\xac\xec\x01\xc1\xf1\x1f\x9f\x0a\x89\x78\x61\xa7\x7d\x04\x8b\x95\xe7\x01\xa3\x37\x08\xe2\xb7\xd2\x1a\x04\xe5\x90\x55\x49\x50\xb6\x3e\xd2\x50\x7d\x2b\x57\x64\x3d\xf3\x49\x44\xa3\xac\xa5\xc7\xce\x2c\x3e\xb8\x46\x05\x72\xca\x0b\x0d\x73\xd6\x4b\xc5\xf3\x39\xfc\x89\xaf\x5d\x65\xcf\xb4\x96\x5e\x2b\xd0\xc6\x07\x69\x14\x46\xce\xb3\xfd\xd8\x4a\xda\xc3\x4b\x63\xbc\x2c\xf0\x05\x0a\xeb\xc8\xb4\xdd\xca\xa4\x52\xe8\x7d\x2e\xd8\x51\x3d\x7c\x2f\x93\xb4\x38\xf4\xf0\xf0\x08\x9f\x13\xa5\xef\x62\xc2\x12\x1f\x7a\x8d\xef\xa7\x99\x98\x9c\xa8\x9a\xcd\xe1\xd0\x7f\x50\xfd\x7c\x34\xca\x59\xa3\xff\xa1\x10\x27\xab\x3a\xcb\x21\x8d\x63\xa3\x5c\x6a\x4c\xc0\x2e\xe5\xb2\x80\xcf\xf4\x11\x4c\xe4\x6a\x63\xd0\x3d\x0c\x86\x64\xc1\x27\x11\x91\xb3\x0a\x7e\x4d\x26\x9c\xc2\x6d\x27\x13\xd3\xa1\x7b\xf2\x08\x55\x4e\xeb\xf8\xb1\xc7\xe3\xcf\x4e\xc1\x38\xf2\xad\xac\x12\x2e\x1d\x69\x3f\x83\x03\x6d\xdd\x49\xb3\xc5\x16\x1e\x78\x8e\x02\x7e\x69\x7b\x33\x2a\xe2\x8e\x49\xc7\x39\xa1\x13\xdc\x18\xea\x4a\xae\xa8\x3f\x91\x0f\x8f\xf4\x62\x1c\xe1\x66\x9e\xae\xab\xa7\x5a\x12\xd9\xb1\x30\x47\x6a\x96\x6a\x9c\xee\x4a\xe2\x38\x1f\xdd\xea\x1f\x2e\x76\xbf\xc1\x12\x03\x66\xf1\xd9\x8c\x32\x4c\x1f\x8e\x96\x87\x5b\xc6\xb9\x2e\x22\x9a\x78\x3f\x75\xcd\x9d\xfb\x38\xf4\x39\x6f\x99\x6e\x43\x43\x5e\x46\x82\x53\x9f\x98\x33\x49\x3d\x7b\x34\xf9\x36\x55\x4d\xc0\x37\xae\xcd\x9f\xfe\xfe\x46\x3f\x06\xe2\x13\x90\xfb\xa6\xaa\x72\x46\xcb\x9f\xfe\xb0\x6a\x4f\x53\x54\x39\xd3\xe5\x69\xe3\x34\xa9\xfb\x6e\xca\x58\x39\x4a\x79\x3f\x21\x1f\x48\x07\x91\x89\xfc\x2d\xca\x55\xea\x6b\x51\x1a\x48\x18\xf5\x73\x44\xba\x9c\xb5\x2d\xe7\xda\x84\xf0\xfe\xa8\x77\x5d\x3f\xc6\xd8\x37\x5e\xe3\x1b\x49\xc0\x80\x7a\x24\x01\x97\x84\x49\x1c\x22\x73\xdf\x77\x93\xf9\x63\x26\x06\xec\x57\x32\xf1\xe1\xa8\x2e\xa5\x6d\x1b\x6e\x5c\x13\x9c\x38\x89\x7f\x03\x00\x00\xff\xff\xe0\x91\xc0\xfc\xbc\x0a\x00\x00")

func hashmapHashmapGoBytes() ([]byte, error) {
	return bindataRead(
		_hashmapHashmapGo,
		"hashmap/hashmap.go",
	)
}

func hashmapHashmapGo() (*asset, error) {
	bytes, err := hashmapHashmapGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "hashmap/hashmap.go", size: 2748, mode: os.FileMode(420), modTime: time.Unix(1586691967, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _iteratorIteratorGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x53\x3d\x6f\xdb\x30\x10\x9d\xc9\x5f\xf1\xa6\x42\x2a\xe2\xd8\x73\xe0\x8c\x69\xe1\xa5\x4b\xbd\x15\x45\xc1\xd2\x27\x99\x88\x7c\x14\x4e\xb4\xdb\x22\xd0\x7f\x2f\x4e\x12\x59\xc7\x59\x8a\x4c\x86\xe9\xbb\xf7\x75\xcf\xbd\xf3\xcf\xae\x25\x84\x44\xe2\x52\x14\x6b\xd7\x6b\xec\x37\x08\x03\x1c\x5a\x62\x92\xe0\x71\x71\x12\xdc\xcf\x8e\x90\xfe\xf4\x84\xbe\x73\x9e\x8e\xb1\x3b\x90\x20\x36\x70\x5c\x96\x41\x1d\x9d\x88\xd3\x3d\x76\x09\xbf\x42\xd7\x81\x63\x82\xeb\x7b\x72\x82\xc0\x48\x47\x9a\x31\x5d\xa2\x03\x7c\x3c\x90\x9d\x10\xf7\x1b\x0c\x49\x02\xb7\x0b\xfb\xe7\x79\x26\xca\xa7\x33\xfb\x3c\xf2\xea\x11\xcd\x99\x7d\xd5\xe6\x27\xf8\xa3\xe3\xed\x0a\xfb\x4d\x0d\x12\x29\x36\xbe\x76\xc1\x53\x59\x2c\xdc\x43\x16\x3a\xa0\x91\x78\x52\xa7\xe1\x42\x8c\x41\xc7\xad\x42\xbf\xd9\xad\x06\xf1\xf8\xf6\x5d\x09\x6e\xa5\xbc\x58\x23\x94\xce\xc2\xb3\x28\x0d\xe3\x8d\x1e\x1d\x32\x4d\x14\xfc\xb8\xc3\x05\x0f\x8f\x10\xc7\x2d\x41\x41\xf5\x17\x33\x2d\x6d\x57\xb8\x58\x63\x46\x6b\x32\x20\x87\xce\x9a\xd1\x8e\x8b\x9d\x9d\x4e\x85\x53\x9f\xc5\x97\xdc\xe3\x85\x44\x53\x9c\xa2\xca\xde\x72\x70\xf3\x16\x27\x92\xc6\x79\x52\xbe\xf5\x1a\x4f\x22\x98\x49\x86\x45\x61\x68\x10\x12\x8e\x7a\x2d\xa6\x03\x0e\x67\x3d\x48\x8e\x2c\x44\xb6\xe6\x49\xa4\x2a\xf9\x2a\xc8\x17\xfa\x9d\x0a\x0a\xeb\x97\x85\x7b\x8e\xb5\x74\xca\xe8\x60\x55\x63\xbb\xd2\x5c\xb0\xdf\xa8\xa3\x49\xdd\xe4\x7b\x48\x72\xf6\x49\x85\x91\x08\x16\x02\x53\x72\x5c\xe6\xdf\x27\x7a\x3a\x66\x15\xf0\x51\xe1\x6a\x5c\x59\xb8\xba\x5b\xb8\x27\x91\x85\xe3\x7f\x3d\xdd\x00\xdf\x3a\x7c\x85\xae\x23\x0b\xfc\x52\x1d\x82\x17\x9a\x9a\xb8\xcb\x37\x9c\xe0\xff\x35\x5a\xf1\x67\x92\xbc\x52\x35\xb7\xd5\xab\xf3\x75\x5f\xac\x69\x89\xb5\x57\x1f\x94\x4b\x2b\xa5\x9f\x0f\x38\xb9\x67\xaa\x16\x49\xf5\x9d\x76\xc9\x9a\x36\xce\x45\xad\xa7\xea\xb5\xc4\xea\x1e\x8f\x68\xf4\xff\x34\x69\xad\xad\x31\xbe\x8b\x03\x5d\xbf\x8c\x55\x6d\x8b\xa7\x96\xd8\x8e\xf6\x6f\x00\x00\x00\xff\xff\x5e\xc3\x04\xfa\x3d\x04\x00\x00")

func iteratorIteratorGoBytes() ([]byte, error) {
	return bindataRead(
		_iteratorIteratorGo,
		"iterator/iterator.go",
	)
}

func iteratorIteratorGo() (*asset, error) {
	bytes, err := iteratorIteratorGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "iterator/iterator.go", size: 1085, mode: os.FileMode(420), modTime: time.Unix(1586692371, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _converterConverterGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x90\xcf\xca\xdb\x30\x10\xc4\xcf\xd1\x53\xcc\xd1\x86\x8f\x7e\xf6\xb5\x90\x07\xe8\xb9\xbe\x85\x1c\x54\x79\xed\x2c\x51\x24\xb3\xbb\x76\x29\x21\xef\x5e\xe4\x3f\x84\x1e\xfb\xdd\xc4\x32\xf3\x9b\x19\x4d\x3e\xdc\xfd\x48\x08\x39\x2d\x24\x46\xe2\xdc\xe7\x27\xba\x06\xac\xf0\x18\x29\x91\x70\xc0\xe2\x85\xfd\xaf\x48\xb0\x3f\x13\x61\x8a\x3e\xd0\x2d\xc7\x9e\x04\x79\x80\x87\xe6\x59\x02\x61\xf1\x71\xa6\x6f\xf8\x61\xf8\xcd\x31\x22\x65\x83\x9f\x26\xf2\x02\x4e\xb0\x1b\x6d\x38\x6f\xd4\x23\xe4\x9e\xdc\x0a\xeb\x1a\xa8\x09\xa7\x71\x0b\x6e\xff\x2b\xb8\x27\x35\x4e\xde\x38\xa7\x2f\xa6\xb7\xe0\x64\x24\x83\x0f\xf4\x7c\xed\xdb\x7f\x46\x0e\xb4\xf5\xd0\xf5\x99\x87\x52\x93\x22\x3d\x28\x99\xc2\xf2\xf1\x5d\xc7\x84\xcd\x71\xb9\x76\xcd\x86\xc8\x5d\xbb\x9d\x76\x9d\xc2\x6e\xac\x3b\xcd\xf2\x3f\xe0\xf6\x0d\x9e\x95\xd3\x88\x49\xf2\xc2\xfd\x5a\xb3\x98\xb5\x8c\x1b\xe6\x14\xca\x4a\x57\x1e\xa8\xf4\xc8\xac\xdf\x59\xd5\x9e\xb5\x6a\xab\xae\xa9\xd1\xb5\x75\xe9\xd4\xe2\xe9\x4e\x42\x8a\xef\x67\x3c\xfc\x9d\xaa\x72\xfb\x40\xa4\x54\x69\x5d\xbb\xd3\x90\x05\xfc\x01\x36\x7a\x14\x89\xf8\x34\x12\xb4\x98\x8a\xeb\xc2\x57\x9c\x8f\x1d\x55\x11\xd5\xee\xf4\x2a\x40\x9b\x25\x41\x48\xdd\xcb\xfd\x0d\x00\x00\xff\xff\x26\x55\x8e\x07\x46\x02\x00\x00")

func converterConverterGoBytes() ([]byte, error) {
	return bindataRead(
		_converterConverterGo,
		"converter/converter.go",
	)
}

func converterConverterGo() (*asset, error) {
	bytes, err := converterConverterGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "converter/converter.go", size: 582, mode: os.FileMode(420), modTime: time.Unix(1586692262, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"list/list.go": listListGo,
	"set/set.go": setSetGo,
	"hashmap/hashmap.go": hashmapHashmapGo,
	"iterator/iterator.go": iteratorIteratorGo,
	"converter/converter.go": converterConverterGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"converter": &bintree{nil, map[string]*bintree{
		"converter.go": &bintree{converterConverterGo, map[string]*bintree{}},
	}},
	"hashmap": &bintree{nil, map[string]*bintree{
		"hashmap.go": &bintree{hashmapHashmapGo, map[string]*bintree{}},
	}},
	"iterator": &bintree{nil, map[string]*bintree{
		"iterator.go": &bintree{iteratorIteratorGo, map[string]*bintree{}},
	}},
	"list": &bintree{nil, map[string]*bintree{
		"list.go": &bintree{listListGo, map[string]*bintree{}},
	}},
	"set": &bintree{nil, map[string]*bintree{
		"set.go": &bintree{setSetGo, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

