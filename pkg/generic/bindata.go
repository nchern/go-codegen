// Code generated by go-bindata.
// sources:
// pkg/generic/list/list.go
// pkg/generic/set/set.go
// pkg/generic/hashmap/hashmap.go
// pkg/generic/iterator/iterator.go
// pkg/generic/converter/converter.go
// DO NOT EDIT!

package generic

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _listListGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x57\xdf\x6f\xdb\x38\x12\x7e\x96\xfe\x8a\xd9\x3e\x1c\xa4\x85\x63\x67\x5f\x8b\xf6\xa1\x38\x5c\x16\x0b\x64\x0f\x41\x93\xeb\x3d\x2c\x8a\x03\x23\x8d\x6c\x6e\x69\x52\x20\x69\x7b\x7d\x85\xff\xf7\xc5\x90\x94\x44\x59\x3f\xec\xa4\x79\x6a\x2c\xce\xcc\x37\x33\xfc\x66\xf8\x75\xb5\x82\x07\x56\x7c\x63\x6b\x04\xc1\x8d\x85\x5a\xab\x3d\x2f\xd1\x00\x83\xe7\x1d\x17\xf6\x86\x4b\xe0\xdb\x5a\xe0\x16\xa5\x65\x96\x2b\x09\xaa\x02\x06\x6b\x94\xa8\x79\xe1\x9c\xd2\x3a\x8a\x90\xa6\x7c\x5b\x2b\x6d\x21\x4b\x93\x77\x46\x69\xfb\x8e\xfe\x3d\xca\xe2\x5d\x9a\xa7\xe9\x6a\x05\x4f\xb7\xc0\x4d\x14\xc1\x1e\x6b\x84\x3d\xd3\x9c\x3d\x0b\x84\x5a\xb0\x02\x37\x4a\x94\xa8\x3d\xd0\x37\x3c\x3a\x93\x25\xfc\x66\xe1\xc0\x85\x00\xa9\x2c\xb0\xba\x46\xa6\x81\x4b\xb0\x1b\xf4\xa1\x98\xc5\x12\x0a\x55\x62\xea\x22\x3e\xdd\x82\xb1\x9a\xcb\x75\x00\x7d\xd0\x58\xf2\x82\x59\xf4\xe8\x75\xfb\xb3\xda\xc9\xc2\xd7\x25\xc9\x89\x9c\x9b\x08\x0f\x3d\xa3\xec\xe9\x36\x87\x67\xa5\x44\x88\xf8\x85\x1b\x6e\x95\xf6\xf1\xf6\xe1\x47\x1b\x6d\x67\xb0\x04\xab\xfc\x01\x70\x8b\x5b\x43\x05\x51\xba\xae\x4d\x01\xe2\x4b\xe4\x97\x71\xe0\xd2\x2e\x60\xcf\x04\x9c\x61\xdd\xa3\x31\x77\x3b\x59\x78\xb0\x42\x6d\x6b\xa6\xd9\x28\x1e\xb5\x7c\x80\xd2\xba\x3b\x98\x8a\x6b\x63\x17\x60\xb0\x50\xb2\x1c\x20\x11\x0b\xf0\xaf\x5a\x19\xf4\x50\xd2\x6a\x56\x58\x7f\x19\x8e\x22\xaa\xa2\x3e\xa1\xa7\x84\x69\x21\xe8\x88\x4b\x8b\xba\x62\x05\xc2\xf7\x34\x59\xad\xe0\xb7\x3b\x2e\x2c\xba\x16\x19\xbe\xe5\x82\x69\x4a\x31\x7c\x7c\xde\x59\xd0\x68\x77\x5a\x3a\xa0\x0d\x93\x12\x05\x70\x69\x2c\xb2\xd2\xe3\xb5\x61\x8d\x65\xb2\xc0\x34\x09\x01\xb3\x2a\xbe\x9d\x1c\x3e\xdc\x90\x3b\x3c\xdd\xa6\x1e\x96\xc2\xfb\xd0\x51\x64\xbb\x61\x96\x32\xa9\xb8\x10\x58\xc2\x81\xdb\x0d\xd8\x0d\x37\xbe\xaa\xb6\x9e\x84\xbc\xb3\x41\xcc\x7f\xb1\x62\xe3\x2f\xd3\x00\xd2\xdf\xc1\xa1\xe1\xe0\x96\xd5\x8e\xa2\xc6\xaa\xda\xd0\x7d\x6b\x37\x2d\x06\x78\xd5\x23\x47\x5b\x72\xc5\x84\xc1\x34\xa1\xb8\x59\x63\xd0\xf2\x21\x0f\xa5\x7b\xec\x5f\xb1\xeb\x14\xbf\xb1\x1d\x76\xa5\xd5\xb6\xab\x21\x4d\x7e\x45\xeb\x49\x94\xb7\x79\x87\x66\x77\x8d\x96\x78\xf0\x15\xc7\x7d\xf0\xfc\x74\x1d\x62\x1a\xe1\xc8\x51\x94\xc4\x27\xbd\x43\x9a\x8b\x35\xdf\xa3\xec\x66\x26\x4d\xc6\xaf\x21\xce\xf9\x93\x3c\x36\x57\xe0\xa2\x70\xc7\x7d\xed\xc7\xcf\x82\x40\x46\x54\x92\xe8\xa0\x09\xe3\xb0\xe1\xc5\x26\x9a\xcb\x26\x63\xf2\x4e\x93\x4f\xf2\x78\x8e\xe6\x49\xeb\xb0\x84\x38\xc7\x62\xe7\x39\xf7\xe2\x41\xa5\x34\x30\x21\x9a\x89\xa4\x1c\xd2\xe4\x93\x10\x13\x18\x77\x5c\x96\x77\x34\x35\xfd\xf3\x05\x94\x58\xb1\x9d\xb0\x5f\xc2\xc4\x3e\xdd\x7a\xdb\x7b\x76\x8d\xa9\xcb\xfd\x1e\x65\x97\xda\x06\x04\xca\xb5\xdd\xf4\x36\x45\x72\x8f\x32\xcb\xe9\x56\xbd\xc7\xe3\x81\xd5\x60\x0e\xac\x36\xa1\x46\x77\x79\x69\x42\xdf\x33\xbe\x80\x3f\x1d\x01\x82\x2d\x6d\x03\x5a\x09\x26\x8a\x47\x1f\xb3\xe7\xa3\x5b\x08\xdd\x6e\xe8\x5f\xdf\x3f\x05\xdd\x4d\xa1\x91\x59\xb7\x07\xcc\x86\x09\xa1\x0e\x50\xa8\xfa\xe8\xb3\x6b\x49\xe7\x4c\xb3\xd6\xdd\xc1\xa2\x05\x83\x7e\x0f\xed\x99\x20\x12\x55\x3d\xe6\xa6\xc9\x63\x43\xd5\x76\xdf\x85\xbb\xac\x6b\x94\xa5\x5b\xf0\xb2\xec\x55\x48\xab\x83\x02\xd2\x71\xd4\x1f\xba\x62\x83\x7a\xcf\xe5\xda\x7d\x53\xba\x44\x9d\x26\x3e\x4e\xe6\x3d\x97\xcb\x65\x0b\xf0\xa0\xd1\x21\xd4\xfe\xdf\x51\x88\x67\x5c\x73\x29\x29\xe2\x65\xa0\x10\x6f\x0c\x49\xd5\xa0\x71\xab\xf6\x68\x40\x10\xdd\x1d\xd5\xc3\xcc\x0e\xeb\x60\xb2\xec\xa6\xdc\xba\x65\xd2\xfc\x8c\xb8\xc3\x25\x14\xcc\xb8\x86\xe2\xb6\xb6\xc7\x70\x09\x0f\xaa\xce\x86\x0c\x3b\xa5\x7e\x3d\x3f\x33\x83\x61\x97\x1a\xab\x77\x85\xa5\xfd\xec\x40\xff\xf8\xea\xcd\x56\x2b\xf8\x37\x1e\x82\x4d\x7b\xed\x32\xc2\x38\xdf\xfb\x6e\x99\xb5\x3e\xed\xfd\x53\xe4\x30\x8b\xed\xe1\x9d\x56\xdb\x47\xc1\x0b\xcc\x08\xee\xfb\x69\xb9\x5c\xe6\xe7\xa0\xad\x4d\x44\xba\x21\x2c\x70\xc9\x2d\x67\x82\xd3\x6b\xe7\x3a\xd9\x0c\xba\x21\xdf\xb3\xa4\x3a\xdc\xf8\x72\xa2\x44\x05\xbc\xff\x08\x5b\xf6\xcd\x27\xb6\xa0\xe9\xf3\xa6\x79\x9e\x26\x44\xf5\x4c\x2c\x3c\x33\xf2\xb6\xaa\x7f\x74\xcd\xfc\x4e\x09\xbe\x07\x71\xea\x8a\x79\x3c\xca\x42\x2b\xc9\xff\x8f\xe5\x79\x33\xe9\x2d\x2d\x76\x5a\x53\x19\x86\x55\xd8\x3e\x6b\xf1\x5b\xd7\x56\x30\x08\xf4\x26\x35\x70\x29\x51\x93\xc3\x68\x15\x6d\x89\xa4\xd7\xc2\xa1\xf3\x78\x0f\xee\x1f\x57\xa7\x4b\x30\x13\xf0\x73\x17\x21\x87\xb9\xf7\xc0\x33\xc2\xec\x84\x1d\x07\xf6\x9c\x38\xa5\x09\x2d\xe5\xff\x2d\x60\x4f\x66\x9a\x49\x12\x94\x4b\x11\x02\x24\xbc\x82\x2a\xdb\xe7\xee\xef\x10\xce\x1f\x7e\x0c\xbb\x22\x8b\x3e\x2e\x60\x9f\xa7\x49\x72\x4a\x93\xae\x28\x7f\x3c\x59\xc1\x25\x65\xd1\x55\x61\xda\x86\x87\xa3\x3c\x4d\xd6\xca\x4b\x2b\x9f\xdf\x6c\x21\xfd\x4a\xda\x98\x1f\x6e\x60\x4f\x1f\x4e\x3e\xef\xa4\x10\xca\x60\xa8\x89\x6e\xee\x94\xd1\x56\xe9\xd5\x62\xa6\x8b\x39\x93\x30\x6f\x97\xfc\x59\xba\x3f\x9c\xe9\xbc\xfc\x21\x4c\xca\x87\xcf\xb0\xe2\xa7\xe0\x4d\x4f\x5f\xc7\x0f\x07\x2e\xce\x39\x20\x26\xf3\xe8\x29\xa7\x68\x87\x79\xac\x3f\xf8\xd7\x49\xcf\x09\x65\xd2\xa4\x7e\x2d\xa1\x5b\xf5\x72\x9e\xb3\xd7\x89\x93\xe8\xe3\x9a\xe5\x1a\xf4\x9f\x06\xf0\x41\x92\xf6\xf1\x5d\x4e\xd3\x73\x7f\xad\x30\x7a\x55\x3f\xf6\xe7\xc9\x74\x61\x67\x53\xba\x4a\x7f\xf9\x8c\x76\xb2\xa4\x74\xa2\xc0\x2f\x48\xd3\xbb\x7f\x1c\xe6\xe9\x0e\xc2\xab\x70\xa7\xb4\x93\x60\x13\xf9\xb6\xea\x2e\x66\x1d\xca\xcc\x63\xe6\x93\x75\xf6\xe5\x9e\x7b\x09\x1a\xae\x2e\x1a\xda\xfe\xf9\x15\x3e\x76\x7f\x2f\xae\x60\xf3\xbc\x36\x24\x14\x2a\xa5\x79\x43\x9c\xdd\xd3\xed\xa3\xfb\xf4\x5d\x2c\xc0\x7f\x39\x79\xab\xa5\x0b\xe6\xed\xa3\x95\x30\x7d\x75\x7d\x25\x49\x60\x85\xaa\x39\x96\x23\x2f\x5c\xe8\x4e\xf3\xc4\x79\xbb\xa6\x40\x07\x46\x4e\x23\x4a\xc0\x5b\x3a\x05\xd2\x2d\xa9\x70\x53\xbf\xef\x2c\xfd\xa7\xda\x4c\xf5\x66\x20\x59\x7b\x5d\x27\x1e\xcc\xf0\x72\x44\x90\x76\xee\xdd\x2b\x26\xc2\x03\xe6\xec\x1a\xa1\x34\x1a\x70\x4c\x78\x8e\x45\x74\xe7\x4d\x6b\xe6\x23\x8e\x89\x48\x0a\xc9\xab\xb8\xe9\xf0\x01\x7e\x71\xfc\x1f\x0e\x65\x72\x4a\xe3\xc7\x3e\xf4\x26\xf2\xbd\xf9\xe5\x6b\x1a\xa5\x18\x0c\xde\x0f\x2c\x06\x8f\xb6\xd7\xd3\x9f\xf9\x7a\x63\x1b\x51\xdb\x63\x5f\x24\x6c\xa3\x9a\xd2\x44\x10\x85\x65\xc4\xe5\xae\x7a\x03\x3f\xf7\x63\xd0\x30\x1a\x13\x0d\x55\xb3\x4a\x43\x36\x66\xe9\xa3\x65\xa6\x9b\x34\xd3\x4c\x57\xde\xaa\xed\x4e\x3d\x45\x49\x79\xe5\x15\xa7\x96\x26\xdb\x9d\xc5\xbf\x9c\xf9\xf2\xf3\x7f\x7f\xa7\x1f\xbd\xab\xe9\xe2\x5c\x16\x58\x62\xe9\x82\x2d\x3f\xdf\xab\xe2\x5b\x96\x07\xfe\x8b\xa5\x83\x5d\x36\xde\x79\x64\xf8\x1f\x29\x1a\xd3\x68\x0a\x46\xc1\xdf\x52\x1b\x0d\x12\x1d\x5d\xb7\x3e\xed\x97\x6a\xa6\x91\xda\x5e\xae\x4e\x7a\x85\xff\x80\x8e\x7a\x5d\xa1\x23\xfa\xea\xcd\xab\xba\xac\xb9\x06\xb9\x37\x89\xc6\xae\xb3\x64\x12\x93\xe8\x03\xa5\x35\x00\xdb\xc7\xd4\x75\xe6\xb3\x50\xfb\x49\xa8\x19\x69\x36\x3f\x2f\xce\xf1\x95\xc3\x32\xa3\xc8\x2e\x80\x92\xe3\x2b\x41\x5f\xa6\xc3\x2e\x2d\x8b\x36\x56\xec\xff\x03\x99\x5d\x2d\xc7\x2e\x27\xe6\x43\xbd\x41\x5e\x3d\xd9\x35\x8f\xeb\x4c\x5f\x87\xe2\x45\x9a\xd7\x0c\xb1\x50\xf3\x91\xce\xa7\xab\x95\x74\x11\x5a\x0b\x36\x09\x71\x51\xb1\x4d\xc2\x75\x9e\x63\x80\x97\x47\x79\xa8\xd7\xe6\x1b\x19\xec\x5f\xd9\xca\x09\xf5\x35\x51\x1b\x59\x3b\xcb\x97\xf4\x72\x52\xa3\x8d\x83\xc4\xe6\x4e\x58\x5d\x8f\x34\x2d\xde\xc6\xa1\x7a\xf6\x2f\xc5\x9a\x92\x75\xe7\x60\xbd\xcb\xea\x7b\xcd\x11\x84\xee\xec\xef\x00\x00\x00\xff\xff\x49\xc4\x2f\x43\x48\x1c\x00\x00")

func listListGoBytes() ([]byte, error) {
	return bindataRead(
		_listListGo,
		"list/list.go",
	)
}

func listListGo() (*asset, error) {
	bytes, err := listListGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "list/list.go", size: 7240, mode: os.FileMode(420), modTime: time.Unix(1602456518, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _setSetGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\xc1\x8a\xeb\x36\x14\x5d\x5b\x5f\x71\x56\xc5\x2e\x33\x9e\x59\x3f\x5e\x0a\x8f\xae\x1e\x3c\x4a\xe9\xa4\xab\x21\x14\x59\xbe\x4e\xc4\xc8\x92\x91\x64\x4f\x42\xc8\xbf\x97\x2b\xcb\x4e\xda\x26\x8b\xae\x22\x2b\xba\xe7\x9c\x7b\xee\x91\x5e\x5e\xf0\xbb\x54\x1f\x72\x4f\x08\x14\x31\x78\x37\xe9\x96\x02\x24\x9a\x51\x9b\xf8\xac\x2d\x74\x3f\x18\xea\xc9\x46\x19\xb5\xb3\x70\x1d\x24\xf6\x64\xc9\x6b\xc5\x35\x62\xb8\xd6\x0b\xf1\xf2\x82\xed\x2b\x74\xb8\x39\x13\x4f\x03\x61\x92\x5e\xcb\xc6\x10\x06\x23\x15\x1d\x9c\x69\xc9\xcf\x50\x4c\x4b\x33\x41\x8d\xef\x11\x9f\xda\x18\x58\x17\x21\x87\x81\xa4\x87\xb6\x88\x07\x9a\xd1\x64\xa4\x16\xca\xb5\x24\x12\xe8\xf6\x15\x21\x7a\x6d\xf7\x99\xf7\x8d\x22\x3c\x0d\x9e\x02\xd9\x18\x32\xb6\xeb\xf8\x5c\x66\x08\x4b\x21\x1f\x0d\xd1\x8f\x2a\xe2\x2c\x8a\x1e\xbd\x1c\xde\xb7\xaf\xbb\xc6\x39\x23\x2e\x09\xee\x37\xfa\x9c\x8f\x29\x4f\x32\xb2\x25\x16\xda\x86\x28\xad\xa2\x19\x94\xff\xec\xb4\x31\xd4\xe2\x53\xc7\xc3\x62\x5e\x7b\x25\xeb\x46\xab\x56\xa0\x72\x92\x26\xa0\xae\xeb\xed\x6b\x85\x9f\xe7\xf2\xb3\x28\x3c\x05\x7c\xd9\xe0\xa7\xb4\x71\xee\xbf\xdc\x4a\x39\x5f\x2e\xe9\x40\xfd\xad\x6d\x53\x79\x5d\xd7\x15\xef\xc4\xd1\x5b\x78\x0a\x59\xeb\xb7\xb6\x85\x6c\xdb\xa4\x31\x93\x23\xba\xd9\x80\x59\x44\x19\x32\x65\x85\x05\x6b\x91\x72\x16\x45\xe7\x3c\xfe\x7a\xc2\xc4\x42\xbc\xb4\x7b\x9e\x97\x09\xfc\x4f\x11\xea\xfe\x7d\xda\x61\x83\xe8\x47\x12\xc5\x25\x33\xfe\x41\xbd\x9b\x08\x3e\xfd\xfc\x83\xb7\xf3\xae\x7f\xc0\x3c\x17\x95\x47\x64\xda\x96\x0c\x45\x2a\x43\xdd\x3f\xe1\x58\x65\xe4\x1f\xc4\x9d\x71\x83\x61\x35\x12\x76\xec\x1b\x5a\xb3\x70\x0f\xfb\x07\xd9\xb2\x82\xb6\xd9\xd3\x64\x90\x21\xcb\xe0\x0b\xf2\xaf\xce\x46\xa9\x6d\x80\x3a\x90\xfa\x08\xd0\x29\xc9\x7a\xa2\xab\xf8\x86\x8c\xb3\xfb\xf0\xd8\xbc\x05\x23\x37\xc1\x43\xba\x21\x64\xb3\x8e\xbb\x65\x28\xc6\xac\x8d\x48\xa8\x83\xb4\x96\x0c\x74\xe4\x18\x3b\x0f\x37\x91\x47\x3c\xe8\x70\x7f\x48\xc6\x94\x15\xbe\x3e\x73\x19\xe7\xf7\x2c\x0a\xc5\xd3\xe9\xe5\x07\x95\x79\xb3\x12\xc5\xde\x81\x2b\xcb\x64\x67\x1a\xe3\xf1\x3a\xc3\x50\xf7\x69\xbb\x50\xf8\xfa\x8c\xa3\x28\x8a\x8b\x28\x0a\x65\x5c\xa0\x52\x55\xa2\xb8\x94\xd7\x2c\xa9\x2c\xfa\x4f\xcb\x77\x5c\x0e\x83\xd1\x14\x30\xa6\x2f\x37\xb0\x64\x5e\x45\xb7\x2a\x86\xb4\xed\x6a\xdf\xbd\x0e\x12\x52\xd9\xac\xdf\xd7\xc4\xff\x4b\x66\x93\x65\xce\x29\x3f\xb2\xb0\xab\xa1\x59\xd6\xdb\xd8\x44\x2f\x55\x44\xc8\x8b\x80\x66\x4e\xda\x43\x07\x97\x92\xff\x27\x61\x89\xe8\x5d\x15\xdf\x6d\x24\x1f\x48\xf1\xb5\xb7\x6d\xe0\xb4\xcd\xdf\xf9\x5d\x3c\x25\x53\x1e\x2a\x5a\xcb\xcb\xd3\x1d\x49\x92\xe5\x84\xba\x17\x45\xc3\xab\x13\xaf\x74\x97\x32\x2c\x2b\xfc\x92\x16\xcd\x3c\x67\xf9\x84\x06\x1b\x34\x4f\x90\x59\x66\x58\xb3\x71\xf3\x7a\x54\xff\xe9\x53\xa6\x72\xdd\xa1\x79\x3f\xee\xe6\x6c\x78\x0a\xbc\x5e\xee\x37\xc3\x5d\x04\xdf\x7a\x6c\xd2\x03\x73\xeb\xc1\xdf\x01\x00\x00\xff\xff\xee\x3d\x05\xca\x2d\x06\x00\x00")

func setSetGoBytes() ([]byte, error) {
	return bindataRead(
		_setSetGo,
		"set/set.go",
	)
}

func setSetGo() (*asset, error) {
	bytes, err := setSetGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "set/set.go", size: 1581, mode: os.FileMode(420), modTime: time.Unix(1601837691, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _hashmapHashmapGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\xc1\x8e\xe2\x46\x10\x3d\xd3\x5f\x51\xd9\xc3\xca\x13\x11\x03\xd7\x91\xe6\x14\x45\xab\x95\xb2\x51\x34\xe3\x4d\x0e\xab\xd5\xa8\x69\xca\x43\x0b\xbb\xdb\xea\x6e\x7b\x96\x8c\xf8\xf7\xa8\xaa\x6d\x68\x33\x18\x94\x9c\x00\x53\xf5\xde\xab\xaa\xf7\xbc\x58\xc0\x9f\x52\xed\xe4\x0b\xc2\x56\xfa\x6d\x2d\x1b\x68\x9c\xed\xf4\x06\x3d\x48\x58\xb7\xba\x0a\xbf\x68\x03\xba\x6e\x2a\xac\xd1\x04\x19\xb4\x35\x60\x4b\x90\xf0\x82\x06\x9d\x56\x50\xcb\x46\x34\x63\x0c\x21\x74\xdd\x58\x17\xe0\x83\xdf\x1b\xf5\x41\x88\xc5\x02\x8a\x25\x68\x9f\xb4\x85\x7d\x83\xd0\x49\xa7\xe5\xba\x42\x68\x2a\xa9\x70\x6b\xab\x0d\xba\x88\xbe\xc3\x3d\x97\xe4\xf0\x39\xc0\xab\xae\x2a\x30\x36\x80\x6c\x1a\x94\x0e\xb4\x81\xb0\xc5\x08\x25\x03\x6e\x40\xd9\x0d\x0a\x46\x2c\x96\xe0\x83\xd3\xe6\x25\x92\xae\xfe\x13\x69\x27\xab\x16\xff\x1f\xed\x0a\xb4\x09\xfd\xa0\xc5\xea\x8b\x6c\xfe\xd2\x5e\x07\xeb\x22\x7f\xd7\xff\x28\x5b\xa3\x78\x83\xc1\xc6\x67\xc0\x1b\x97\xda\xf9\x41\xfe\xa8\x99\xea\xb3\x62\x39\x87\x62\x75\x07\x6b\x6b\xab\x94\x01\xf0\x47\x63\x3d\x7a\x16\xa5\xac\x09\x4e\xaa\x40\x83\x14\x4b\xc2\x2f\x56\x7c\x9a\x14\x96\x34\xa2\x2b\xa5\x42\x78\x13\xb3\xc5\x02\x7e\x93\x6a\x1b\x85\x78\x40\xfa\x8e\xf1\xcc\xc3\xa8\xb5\x6c\x78\x13\x3e\xd8\xc6\x83\x0e\x34\xb7\xb6\xc6\x83\x2e\x47\x33\x81\xc3\xd0\x3a\xe3\xa1\x94\x95\x47\x31\x23\xdc\x6c\x28\x18\xcf\x74\x27\x98\xf9\x13\x86\x63\x13\x31\xc5\xd5\x47\x63\xe9\x0e\x0d\x19\x20\x87\xcf\x25\xff\x49\x66\x78\x95\x9e\x6f\x51\xda\xd6\x6c\xf8\xa9\x47\x65\xcd\xa6\x47\xe9\x01\xf8\x64\x6b\x1c\x74\x7c\xc2\x90\x51\x73\xb1\xbc\x83\xac\x83\x62\x35\xef\xfb\x69\x97\xbd\x92\x27\x0c\xe0\x31\x4c\xcb\x10\xb3\xa7\x23\xcc\x9c\x2a\xe8\x1a\xb1\xf7\x6b\xb3\x91\x01\xa1\xe5\x8f\xfe\x10\xad\x73\xb4\x41\x3a\x6c\xe9\x6c\x7d\x44\xa2\x63\xcc\x62\x43\xe6\x1d\xe7\xe6\x5b\xb1\xfc\x4e\x97\xed\x37\x14\x31\x1f\xb1\xb6\x1d\x82\xe3\x0f\x9f\x0a\x89\x78\x61\xab\x7d\x04\x8b\x95\xc7\x01\xa3\x3f\x08\xe2\xd7\xca\x1a\x04\xe5\x90\x55\x49\x50\xb6\xd9\xd3\x50\xa7\x56\xae\xc8\x4e\xcc\x07\x11\x8d\xb2\x96\x1e\x07\xb3\xf8\xe0\x5a\x15\xc8\x29\xcf\x34\xcc\x51\x2f\x15\x2f\x16\xf0\x07\xbe\x0e\x95\x27\xa6\xb5\xf4\x5a\x81\x36\x3e\x48\xa3\x30\x72\x1e\xed\xc7\x56\xd2\x1e\x9e\x5b\xe3\x65\x89\xcf\x50\x5a\x47\xc6\x1d\x56\x26\x95\x42\xef\x73\xc1\x8e\x3a\xc1\x9f\x64\x92\x16\x87\x1e\xee\x1f\xe0\x63\xa2\xf4\x4d\xcc\x58\xe2\xfd\x49\xe3\xdb\x61\x2e\x66\x07\xaa\x66\x73\x38\xf4\xef\x54\x3f\xed\x8d\x72\xd6\xe8\x7f\x28\xc8\xc9\xaa\x8e\x72\x48\xe3\xd4\x28\xe7\x1a\x13\xb0\x73\xb9\x2c\xe0\x23\xbd\x08\x13\xb9\xda\x18\x74\xf7\xa3\x21\x59\xf0\x41\x44\xe4\xac\x86\x9f\x93\x09\xef\xe0\xba\x93\x89\xa9\x1b\x9e\x3c\x40\x9d\xd3\x3a\xbe\xed\x70\xff\x7d\x50\x30\x8d\x7c\x2d\xab\x84\x4b\x47\xda\xcd\xa1\xa3\xad\x3b\x69\x5e\xb0\x87\x07\x9e\xa3\x84\x9f\xfa\xde\x8c\x8a\xb8\x63\x36\x70\xce\xe8\x04\x57\x86\xba\x90\x2b\xea\x4f\xe4\xc3\x03\xfd\x31\x8d\x70\x35\x4f\x97\xd5\x53\x2d\x89\x1c\x58\x98\x23\x35\x4b\x3d\x4d\x77\x21\x71\x9c\x8f\x61\xf5\xf7\x67\xbb\xdf\x60\x85\x01\xb3\xf8\x6c\x4e\x19\xa6\x17\x47\xcf\xc3\x2d\xd3\x5c\x67\x11\x4d\xbc\x9f\xba\xe6\xc6\x7d\x1c\xfa\x9c\xb7\x4c\xb7\xa1\x21\xcf\x23\xc1\xa9\x4f\xcc\x99\xa4\x9e\x3d\x9a\xbc\x9b\xea\x36\xe0\x0f\xae\xcd\x1f\xff\xfe\x42\x3f\x46\xe2\x13\x90\xdb\xa6\xaa\x73\x46\xcb\x1f\x7f\xb7\x6a\x47\x53\xd4\x39\xd3\xe5\x69\xe3\x5d\x52\xf7\xd5\x54\xb1\x72\x92\xf2\x76\x42\xde\x91\x8e\x22\x13\xf9\x7b\x94\x8b\xd4\x97\xa2\x34\x92\x30\xe9\xe7\x88\x74\x3e\x6b\x5f\xce\xb5\x09\xe1\xed\x51\x6f\xba\x7e\x8a\xf1\xd4\x78\x89\x6f\x22\x01\x23\xea\x89\x04\x9c\x13\x26\x71\x88\xcc\xa7\xbe\xab\xcc\xef\x33\x31\x62\xbf\x90\x89\x77\x47\x75\x29\x6d\xdf\x70\xe5\x9a\xe0\xc4\x41\xfc\x1b\x00\x00\xff\xff\xa3\xad\x01\xf9\x07\x0b\x00\x00")

func hashmapHashmapGoBytes() ([]byte, error) {
	return bindataRead(
		_hashmapHashmapGo,
		"hashmap/hashmap.go",
	)
}

func hashmapHashmapGo() (*asset, error) {
	bytes, err := hashmapHashmapGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "hashmap/hashmap.go", size: 2823, mode: os.FileMode(420), modTime: time.Unix(1601837691, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _iteratorIteratorGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x53\x3f\x6f\xdb\x3e\x10\x9d\xc9\x4f\xf1\xa6\x1f\xa4\x1f\xe2\xd8\x73\x90\x8c\x69\x90\xa5\x28\x50\x6f\x45\x51\x30\xd4\x49\x26\x22\x1f\x85\x13\xe5\xb6\x08\xfc\xdd\x8b\x93\x44\x26\x71\x96\xa2\x93\x61\xfa\xee\xfd\xbb\xe7\xed\x16\x5f\x9c\x7f\x76\x1d\x21\x24\x12\x97\xa2\x60\x90\x78\x0a\x0d\x8d\x70\x78\x9a\x42\x9f\x36\x81\x11\x8e\x43\x4f\x47\xe2\xe4\x52\x88\x8c\xd8\xc2\x31\x42\x43\xf1\xe8\x52\xf0\xe8\x88\x49\x82\x2f\x18\x76\xb8\x00\xb5\x76\xbb\xc5\x7e\x87\xa0\xa8\x79\x3a\xfd\x1e\x08\x27\x27\xc1\x3d\xf5\x84\xa1\x77\x9e\x0e\xb1\x6f\x48\x32\x7e\x56\x44\x0b\xf7\x35\x1e\x13\x7e\x86\xbe\x07\xc7\x04\x37\x0c\xe4\x04\x81\x91\x0e\xb4\x60\xba\x44\x0d\x7c\x6c\xc8\xce\xd0\xfb\x1d\xc6\x24\x81\xbb\x95\xfd\x61\x99\x89\xf2\x69\x62\xbf\x48\x69\x27\xf6\xb3\xa3\x74\x70\x09\xe3\x21\x4e\x7d\x53\xb0\x32\xef\x08\xc7\x0d\x46\xe2\x46\xa9\x8e\x48\x51\x4d\x84\x13\x31\xfc\xc1\x31\x53\x9f\xf9\xde\x33\x28\x78\xd5\xe5\xa7\x79\xf6\x76\x83\xfd\xae\x06\x89\x94\x4c\xbe\xf6\xc1\x53\x59\x2c\xe4\xe3\x2b\x7b\x2b\xf1\x58\x18\x47\x1d\xb7\x0a\xfd\x61\xb7\x1a\xc5\xe3\xdb\x77\x25\xb8\x94\xf2\x62\x8d\x50\x9a\x84\x17\x51\x9a\xec\x07\x3d\x3a\x64\xda\x28\xf8\x71\x85\x13\x6e\xee\x20\x8e\x3b\x82\x82\xea\x2f\x66\x5e\xba\xdd\xe0\x64\x8d\x39\x5b\x93\x01\x39\xf4\xd6\x9c\xed\x79\xb5\xf3\xa8\x53\xa5\x2e\xe3\xeb\x11\xe3\x89\x44\x4f\x32\x47\x95\xbd\xe5\xe0\x96\x2d\x4e\x24\xad\xf3\xa4\x7c\xdb\x2d\xee\x45\xb0\x90\x8c\xab\xc2\xd0\x22\x24\x1c\xf4\xf4\x4c\x0d\x9a\x49\xaf\x9b\x23\x0b\x91\xad\xb9\x17\xa9\x4a\xbe\x0a\xf2\x99\x7e\xa5\x82\xc2\xfa\x65\xe5\x5e\x62\x2d\x05\x35\x3a\x58\xd5\xb8\xdd\x68\x2e\xd8\xef\xd4\xd1\xac\x6e\xf6\x3d\x26\x99\x7c\x52\x61\x24\x82\x95\xc0\x94\x1c\xd7\xf9\x7f\x13\x3d\x1f\xb3\x0a\xf8\x5f\xe1\x6a\xbc\xb1\xf0\xe6\x6e\xe1\x9a\x44\x56\x8e\xbf\xf5\x74\x01\x7c\xe9\xf0\x1d\xba\x8e\xac\xf0\x0f\xb9\xff\x5e\x68\x6e\xe2\x63\xbe\xe1\x0c\xff\xda\x68\xc5\x5f\x48\xf2\x4a\xd5\x5e\x56\xaf\xce\xd7\x7d\xb1\xa6\x23\xd6\x5e\xfd\xa7\x5c\x5a\x29\xfd\xbc\xc1\xd1\x3d\x53\xb5\x4a\xaa\xaf\xb4\x4b\xd6\x74\x71\x29\x6a\x3d\x57\xaf\x23\x56\xf7\xb8\x43\xab\xff\xa7\x59\x6b\x6d\x8d\xf1\x7d\x1c\xe9\xed\xcb\xb9\xaa\x6d\xf1\xd4\x11\xdb\xb3\xfd\x13\x00\x00\xff\xff\x89\x59\xdf\x98\xe2\x04\x00\x00")

func iteratorIteratorGoBytes() ([]byte, error) {
	return bindataRead(
		_iteratorIteratorGo,
		"iterator/iterator.go",
	)
}

func iteratorIteratorGo() (*asset, error) {
	bytes, err := iteratorIteratorGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "iterator/iterator.go", size: 1250, mode: os.FileMode(420), modTime: time.Unix(1601837691, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _converterConverterGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x92\x3f\x8f\xdb\x30\x0c\xc5\xe7\xe8\x53\xbc\xd1\x06\xae\x49\xbc\x16\xb8\xb1\x43\xb7\x02\xf5\x76\xb8\x41\x91\x69\x87\x38\x59\x32\x48\x3a\x6d\x71\xc8\x77\x2f\xe4\x3f\x48\xdb\xad\xb7\x09\xc4\xe3\xef\x3d\x92\x3a\x9d\xf0\xcd\x87\x37\x3f\x10\x42\x4e\x37\x12\x23\xc1\x24\xf9\xc6\x1d\x29\x3c\x2e\x33\x47\xfb\xc4\x09\x3c\x4e\x91\x46\x4a\xe6\x8d\x73\x42\xee\x31\x50\x22\xe1\x00\xc9\xb3\x71\x22\x45\x9f\x05\x21\xc7\x48\x61\x91\x5c\xbc\x52\xb7\x51\x95\x73\x3a\xe2\xcb\xcf\x89\x84\x17\x48\x3c\xba\xe9\x5f\x5f\xe7\x4e\x27\xb4\x67\x70\x31\xde\xe9\xf6\x6b\x22\xdc\xbc\xb0\xbf\x44\xc2\x14\x7d\xa0\x6b\x8e\x1d\x49\x89\xe0\xa1\x79\x96\x50\x04\x71\xa6\x23\xbe\x1a\x7e\x70\x8c\x48\xd9\xe0\xa7\x89\xbc\x80\x13\xec\x4a\x2b\xce\xdb\x12\xa8\x23\xb7\x50\xdb\x33\xd4\x84\xd3\xb0\x1a\x37\xff\x65\xdc\x91\x1a\xa7\x75\x19\x1f\x73\x6f\xc0\xc9\x48\x7a\x1f\xe8\xfd\xbe\xcd\xfe\x3d\x72\xa0\x35\x87\x2e\xcf\xdc\x97\x98\xb4\xae\x5e\x61\x79\x5f\xd7\x3e\xc2\xda\xf1\xf2\xda\x9e\x57\x44\x6e\x9b\xb5\xb4\xe9\x14\x76\x65\xdd\x68\x96\xff\x02\x37\x0f\xf0\xac\x9c\x86\xfd\xf0\x7f\x5e\x0d\xfd\x9c\x96\x7b\xba\xf2\x40\xa5\xbb\x67\xfd\xf0\xaa\x36\xaf\x45\x5b\xb5\xe7\x1a\x6d\x53\x97\x4c\x0d\xde\xdd\x41\x48\xf1\xf9\x19\xa3\x7f\xa3\xaa\xd4\x9e\x10\x29\x55\x5a\xd7\xee\x50\x7e\x0c\x3f\x81\x8d\xc6\x22\x11\x9f\x06\x82\x96\xa6\xd2\xf5\xc2\xaf\x78\xde\xe7\xa8\x8a\xa8\x76\x87\x7b\x01\xda\x2c\x09\x42\xea\xee\xee\x77\x00\x00\x00\xff\xff\xf9\xc0\xc1\x57\xc1\x02\x00\x00")

func converterConverterGoBytes() ([]byte, error) {
	return bindataRead(
		_converterConverterGo,
		"converter/converter.go",
	)
}

func converterConverterGo() (*asset, error) {
	bytes, err := converterConverterGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "converter/converter.go", size: 705, mode: os.FileMode(420), modTime: time.Unix(1601837691, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"list/list.go": listListGo,
	"set/set.go": setSetGo,
	"hashmap/hashmap.go": hashmapHashmapGo,
	"iterator/iterator.go": iteratorIteratorGo,
	"converter/converter.go": converterConverterGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"converter": &bintree{nil, map[string]*bintree{
		"converter.go": &bintree{converterConverterGo, map[string]*bintree{}},
	}},
	"hashmap": &bintree{nil, map[string]*bintree{
		"hashmap.go": &bintree{hashmapHashmapGo, map[string]*bintree{}},
	}},
	"iterator": &bintree{nil, map[string]*bintree{
		"iterator.go": &bintree{iteratorIteratorGo, map[string]*bintree{}},
	}},
	"list": &bintree{nil, map[string]*bintree{
		"list.go": &bintree{listListGo, map[string]*bintree{}},
	}},
	"set": &bintree{nil, map[string]*bintree{
		"set.go": &bintree{setSetGo, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

