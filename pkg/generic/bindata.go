// Code generated by go-bindata.
// sources:
// pkg/generic/list/list.go
// pkg/generic/set/set.go
// pkg/generic/typedmap/typedmap.go
// pkg/generic/iterator/iterator.go
// DO NOT EDIT!

package generic

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _listListGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\x4d\x8f\xdb\x36\x10\x3d\x8b\xbf\x62\xb2\x87\x82\x2a\xb4\xf2\xe6\x6a\xac\x0f\x41\x51\x17\x01\x9c\x22\x58\x6f\xd3\x43\x60\x14\x8a\x44\x79\x99\xa5\x49\x81\xa4\x9c\xba\x86\xfe\x7b\x31\x22\xf5\x65\x4b\xdb\x5d\xac\xdb\xe6\x64\x5b\x1c\xce\xbc\xf7\xe6\x43\xe3\x22\x49\x1f\x93\x2d\x03\xc1\x8d\x25\x84\xef\x0a\xa5\x2d\x50\x12\x5c\x19\xa5\xed\x15\x7e\x1e\x64\x7a\x45\x42\x42\xec\xa1\x60\x70\x7f\x03\xc6\x6a\x2e\xb7\xed\xef\x8f\x9a\x65\x3c\x4d\x2c\x83\xbc\x94\x29\xbd\xbf\x09\xe1\x8b\x52\xa2\x3d\xff\xc4\x0d\xb7\x4a\xbb\x53\x0e\x5c\xda\x08\xf6\x89\x80\x33\xc3\x15\x33\x66\x59\xca\xd4\x59\xe6\x5c\x1b\x1b\x81\x61\xa9\x92\xd9\x88\x31\x37\x16\x91\x94\xa9\x85\x23\x09\x10\x3d\x00\x7c\xde\xdc\xdf\x90\x60\x57\x5a\xf6\x27\x00\x02\x8f\xef\x7e\xff\x80\xbf\x48\xc0\xcd\xfa\x20\x53\xe7\xa4\x22\x04\x63\xc0\xaf\xec\x9b\xf3\x44\x43\xf8\xd1\xfb\x3c\x92\x40\x33\x5b\x6a\xd9\x9d\x2e\xb5\xda\xad\x05\x4f\x19\x45\xff\xc7\x2a\x8e\xe3\xf0\xdc\x47\x67\xc5\x2d\xdb\x19\x88\xe3\x18\x51\xf7\xfc\x0a\x98\x2f\x60\x97\x3c\x3a\x3f\x11\x08\x26\x9d\x6d\x18\x92\x20\x55\xc5\x81\x8a\x08\xdc\x83\x16\xc4\x0f\xee\xfa\x11\x09\xce\x41\x54\xfd\xb8\x48\x48\x2b\xc9\xff\x62\x99\xa7\x31\x15\x59\x33\x83\xb1\xa7\xb0\xd6\x84\xd0\x28\xf6\x2a\x2d\xc0\xea\x92\xb5\x20\x34\x33\x6d\x5c\x2a\x1a\xc7\x21\x2c\xb9\xb0\x4c\xd3\xbc\x5f\x05\x83\xb8\x3c\x07\xd1\xf8\x3c\x92\x20\x10\x71\x9d\x9b\xf8\x6e\xa5\xd2\x47\x1a\x92\x20\xc8\x58\xce\x34\xb4\xcf\x7f\x93\xc2\x9f\x54\xa4\x46\x54\x0a\x8b\xc8\x87\x32\xb8\x34\x44\xe0\x3c\xcf\xdb\x18\x15\x09\x72\xa5\xe1\x8f\x08\xf6\x78\x49\x27\x12\x0b\x3b\x16\x1e\x0d\xc2\xc9\xe9\x3e\xac\xbf\x7b\xe7\xee\x70\x01\x49\x51\x30\x99\xd1\xde\xc3\x08\xf6\x08\xb0\x42\x28\x3d\x21\x4a\x61\x47\xb5\x78\x3f\x2e\xc6\xed\x75\xfa\x90\x48\x6c\x9b\x63\xc3\xc7\xb4\x65\xe0\x8f\x42\x12\x6c\x95\xab\xfa\xb0\xc1\x39\x90\x6d\x44\xb7\x69\xe1\x10\xee\xd3\x32\x0c\x75\x68\x51\xdd\x5e\xc3\x1e\x1f\x54\xde\x47\x2a\x94\x61\x5e\x11\xac\xc8\x8a\x86\xe4\x44\x89\xf1\xb2\x78\x8f\x3a\x7c\xa7\xd4\x4f\xc8\xbe\x8a\xe7\xcf\x49\xfa\x40\xf7\x7e\xbc\xb5\x83\xee\x92\x0d\x80\x5c\xf8\x13\xd5\xfc\xc6\x47\xa7\x68\xd4\xd6\x75\x0d\x5c\x9c\xd6\xae\x18\xe5\xf0\x0b\xb3\x6e\x28\x87\x3e\x51\xaf\x6e\x59\x17\xac\x86\xf9\x99\x6f\x46\x83\xbe\x93\x87\xd3\x3e\xc1\xb9\x7c\x21\xc1\x9e\xdb\xfe\x35\x50\x37\xe7\x86\x4a\xe5\x89\x30\x6c\x1c\xb8\x10\xff\x13\xf0\x37\x67\xc8\x1d\xca\x13\xe8\x35\x9d\xf1\x51\x2d\xb3\x25\xbe\x52\x87\xf8\x23\xc8\x58\x9e\x94\xc2\x7e\xf2\x6f\xe4\x8b\x14\xc1\x8b\xb3\xb0\x3f\xe5\xd1\xa1\x9a\x64\xb3\x4a\xfe\x2b\x32\xa5\xcc\x90\x49\x0f\xd3\x0b\x18\xba\xeb\x8b\x73\x8a\xf5\x01\xb2\x9b\xcd\x60\xa9\x34\xe0\xbe\x35\x42\x75\xc5\x24\x0d\xb1\x41\x7b\x9b\x09\x2e\x0e\x2e\x5e\x38\x2a\xcf\xfa\x5b\x52\xe0\x48\xf8\xea\x1a\x1b\x57\x8f\xa6\x1f\xa3\xa6\x35\xbf\x6e\x60\xd1\x7d\x8f\xfe\xa1\x63\xd7\x4a\x5b\xfa\xe5\x50\xaf\x67\xdd\xa6\xf6\xac\x51\x37\xa1\xf2\x50\x64\x24\xcf\x74\xef\x4d\xbf\xae\x1f\x1c\x45\x04\x2e\x6a\xe5\x6c\xe2\x1a\x88\xb3\xee\x4d\xe9\xf1\x2a\xf9\x49\x28\xc9\xe8\x25\xe7\x71\xaa\x0a\xce\xb2\x91\x35\xce\x67\xa3\xd9\xe3\x9c\x5d\x23\x6a\x0d\x74\x62\xff\x72\x96\x7e\x01\xeb\xd6\xaf\x06\x64\xef\x45\xe4\x4b\xe5\x43\x69\x13\xab\xb4\x19\x4b\x52\x33\xcb\xbb\x05\xfb\xb5\x79\x69\xab\x02\x2b\x78\xa2\x19\xdf\xb9\xd5\x69\xb0\x7b\x5e\x26\x6e\xb7\x97\x09\xbf\x92\x75\xeb\xea\x18\x92\x8f\x9a\xfd\xfb\x50\x6a\xe7\x4d\x6a\xa7\xa1\xa8\x82\xbe\x68\x1a\x3d\x0b\x0b\x5e\xee\xaa\x0d\x6e\xe1\x6d\xed\xe3\x7c\x68\x9e\xac\xcf\x3e\x8d\xbd\xbb\xd7\x6f\x37\x7d\x6e\xde\x60\x7e\x66\x71\xb6\xf8\xce\x66\xc8\xed\x8e\x6f\x1f\xec\xe0\xcf\x98\x6b\xd8\xde\x5f\x32\x2f\x05\x09\x04\x4e\x0b\xd9\x1b\x1b\x9d\x60\xa6\x11\xcc\xdd\xc6\x69\x67\x4c\x6f\x72\x35\x2f\x57\x8f\xc2\xc4\xce\x17\x35\xdd\x38\x33\xcd\x08\xc3\x3c\xfc\x1d\x00\x00\xff\xff\x52\x2f\x62\x1c\xcd\x0e\x00\x00")

func listListGoBytes() ([]byte, error) {
	return bindataRead(
		_listListGo,
		"list/list.go",
	)
}

func listListGo() (*asset, error) {
	bytes, err := listListGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "list/list.go", size: 3789, mode: os.FileMode(420), modTime: time.Unix(1532984840, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _setSetGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x52\x4d\x8b\x1b\x31\x0c\x3d\x5b\xbf\x42\xa7\x62\x97\xac\xc9\x79\xd9\x14\x4a\x4f\x85\xd2\x43\x37\x3d\x85\x50\x6c\x47\x49\x87\x1d\xdb\xc1\xf6\xa4\x13\x86\xf9\xef\x45\xce\xe4\x83\x76\xa0\xf4\x66\x0b\xbd\xf7\xf4\xf4\x74\x34\xee\xcd\x1c\x08\x33\x15\x80\x72\x3e\x12\xae\x97\x98\x4b\x6a\xc2\xe1\xf6\x7f\xa5\xc2\xa5\xce\x15\x1c\x40\x78\xf4\xe6\xb8\x59\x2f\xb7\x36\xc6\x16\x46\x80\x7d\x17\x1c\x7e\xa5\x5f\xb5\x51\x9e\x4c\x9b\x51\x6b\xbd\x5e\x2a\x7c\x7f\xc1\x0e\x20\x12\x65\x7c\x5e\xe1\xbb\x5a\x18\xfc\xf3\x23\xc7\x30\x8e\xb5\x41\x7f\xdc\xed\x2a\x5c\x6b\xad\xb8\x52\xba\x14\x30\x51\xbe\x89\xc8\x3c\x51\x2a\xbc\xf6\x5e\xa5\x06\x10\xfb\x98\xf0\xc7\x02\x4f\x2c\x94\x4c\x38\x10\xd6\x86\x01\x84\xc8\xda\x6f\x4e\x5b\x5c\x61\x49\x1d\x81\x18\xe7\x18\xbf\x91\x8f\x27\x92\x3d\x4e\x74\x3b\x6a\xa9\x90\xcc\xda\x2f\xb0\x57\x73\x88\x2f\x14\xa4\xc2\x26\x4c\x0e\xeb\xb8\x2d\x05\x86\xcc\xf6\x7f\x8a\xa1\x98\x26\xe4\x49\x83\xbd\x3f\x20\x79\xc6\x7e\x3b\xeb\xb5\x6d\xa5\xc2\x97\x27\xf7\xd3\x04\x8e\x67\x00\xe1\xd8\xa4\x37\x6f\x24\xa7\xa2\x02\x71\x88\xc8\x48\x59\xa7\xaf\xdb\xe8\xef\xab\xc8\xda\xd7\xb2\x70\xf8\xf2\x84\x3d\x08\x31\x82\x10\xae\x8d\x99\xa4\x53\x20\x46\x79\x5f\xb9\x9b\x1b\xe2\x7b\x68\x62\x90\xf6\xf6\xbf\x67\xfb\x87\x92\x9d\x94\x2e\x79\xf6\xcc\x7d\xf7\x38\xc7\xfc\xda\xd9\x92\x8c\x2b\xff\x47\x7e\x8d\xeb\xdf\xfc\x9f\x43\xa1\x94\xc9\x15\x79\x9e\x11\x30\x4c\x9e\xb5\x07\x61\xf9\x75\xe6\x57\xb3\xaf\x39\x1a\x85\x1f\xea\xc3\x5e\x56\x6a\x16\x68\x71\x85\x76\x81\x66\x12\xcd\xb7\x18\x1e\xee\x59\xfd\x35\xb5\xa9\xf0\x66\x8f\x76\xd3\x6f\x2f\x31\x24\xca\xfc\xbe\x5e\x24\xd3\x8d\xc0\x77\x8a\xab\x7a\xf2\x8f\x8e\x7e\x07\x00\x00\xff\xff\xc8\x85\x69\x4d\xa4\x03\x00\x00")

func setSetGoBytes() ([]byte, error) {
	return bindataRead(
		_setSetGo,
		"set/set.go",
	)
}

func setSetGo() (*asset, error) {
	bytes, err := setSetGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "set/set.go", size: 932, mode: os.FileMode(420), modTime: time.Unix(1532984840, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typedmapTypedmapGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x93\xcd\x8e\x9b\x30\x14\x85\xd7\xf6\x53\xdc\xce\x62\x64\x46\x08\x85\x6d\xa4\xac\xaa\xaa\x9b\x4e\x17\x19\xa6\x5d\x8c\x46\x91\x0b\x97\x14\x81\x6d\x64\x0c\x2d\x8d\x78\xf7\xea\xf2\x9b\xa4\xf4\x47\x6a\x96\xf8\xe2\x73\x3e\x1f\x1f\x97\x32\xce\xe5\x11\xc1\xb5\x25\x26\x4a\x96\x9c\x67\xaa\x34\xd6\xc1\x5d\xd5\xea\xf8\x8e\x73\x1a\x40\xb4\x81\xca\xd9\x4c\x1f\xc7\xcf\x10\x32\xed\xe6\x59\x14\x3e\xca\xf2\x53\x56\x65\xce\x58\x48\x6b\x1d\x8b\x68\xe3\x43\x14\x7a\xf0\xc5\x98\xe2\xf2\x37\xd2\xa9\x63\x07\x27\xce\x0e\x4a\x96\xa0\x64\xf9\x12\x6d\x5e\xa3\x90\x73\x96\x55\x4f\xad\x8e\x31\x19\xb6\x31\x55\x3b\xfc\xee\x00\xe0\x81\x50\x82\xfd\xe7\x47\x5a\xe0\x1d\xe7\xe4\x01\x1f\xf1\xdb\xa8\x29\x3c\x78\x98\xe4\x4f\x9c\x59\xac\x60\xbb\x83\xfb\x71\xe9\xc4\x59\x6f\xb5\x05\x58\xdc\x4e\x9d\xcf\xd9\xe8\xb0\x85\xfb\x73\x83\x7e\xd4\x91\x8c\xab\xad\x06\x8b\xd5\x8a\x25\x81\x5a\xa3\xb3\x1f\x98\xac\xbb\x9f\xd3\xf5\x8b\xc1\x7c\xba\x1d\x38\x5b\xe3\xaa\x81\x50\xb3\x96\x07\xef\xd1\x89\x1c\x5b\x88\x36\x1e\x88\x06\xa2\xd0\x87\xd4\xd4\x7a\x88\xc7\x23\xaf\x2c\x05\xb5\xe8\xd2\x41\x55\x30\x9c\x29\xd8\x7f\x30\x71\x4e\xd6\x2c\xc1\x14\x2d\x2c\x83\x67\x5d\x8c\xa3\x8e\x73\xd6\x4c\xa2\x3b\x50\x01\xc5\xf4\x92\x63\xfb\x3a\xc1\xad\x83\xbd\x93\xf1\x57\xd1\x8c\xf7\x7d\x79\xfd\xb7\xc2\x4a\x8d\x85\xdc\x87\x86\xa2\xb4\x52\x1f\x71\xa4\xeb\xd5\xb2\x14\xde\x8c\xf6\x82\x7e\xea\x4d\xd9\x84\xcc\xe8\xf2\x3a\xde\xad\x80\x3f\xcd\x89\xfa\xd0\xc8\xa2\xaf\xe8\x9f\x79\x7f\x87\x7b\x49\x7b\x96\x1c\xec\x48\x79\x3d\xb7\xe7\x32\x91\x0e\x45\x65\xe3\xa5\x88\x97\xe5\xf9\x6f\x92\x5f\x73\x23\xb7\x41\x68\x60\xec\x09\xcf\x0b\xae\xd6\x61\xf7\xa8\x4c\x83\x73\x01\xa9\x73\x37\x21\x3c\x4c\x85\xdb\x5e\x35\x2e\xc1\x02\x1d\x8a\x61\xcd\x87\x1c\x5b\x8f\xcf\x90\xfd\x96\x75\xd0\xb7\x85\xd1\x28\x6e\x9c\xe3\xbf\xbc\xe2\xc5\xe1\x2f\x7d\xa5\x7d\x57\xe1\x5f\xbd\xfe\x9f\x01\x00\x00\xff\xff\x6c\xc8\x89\x3d\x86\x05\x00\x00")

func typedmapTypedmapGoBytes() ([]byte, error) {
	return bindataRead(
		_typedmapTypedmapGo,
		"typedmap/typedmap.go",
	)
}

func typedmapTypedmapGo() (*asset, error) {
	bytes, err := typedmapTypedmapGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "typedmap/typedmap.go", size: 1414, mode: os.FileMode(420), modTime: time.Unix(1532984840, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _iteratorIteratorGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\xc1\x4e\xc3\x30\x0c\x86\xcf\xf1\x53\xfc\x27\x94\x20\x86\x7a\x9e\xb6\x23\x20\x2e\x9c\xfa\x02\x51\xe4\x86\x6a\x90\x4e\x9e\x2b\x81\xaa\xbe\x3b\x72\xd7\x56\x65\xda\x31\xf1\xff\xd9\x9f\x7d\x8e\xe9\x14\x33\xa3\x55\x96\xa8\x9d\x10\xe9\xef\x99\x51\x57\xb8\xa8\xb4\x25\xaf\xef\x37\x2e\xd7\xc4\x6b\x5f\x12\x9a\xbe\x24\x9f\x97\x2f\xa4\xcf\x58\x0e\x3b\xd4\x55\x00\x8b\x6c\xba\xbc\x2b\x0b\xda\xa2\x2c\x4d\x4c\x8c\x81\xdc\x8b\x88\x5f\x52\xee\x83\x7f\xd4\x07\x1c\x76\xd6\x00\x75\x45\xe3\x4c\x9a\x8e\x19\xf4\x49\x0d\x62\x11\x2c\xcc\x54\xda\xe4\x4d\x05\xbe\xc5\xa3\x15\x02\x36\xfd\x8d\x14\xd6\x5e\x0a\xda\x67\x16\xb9\x93\xbe\x15\xf8\x87\x58\x64\x65\xe6\xfd\xd9\x37\xb7\xc7\x08\xcb\x9e\x03\xb9\xcc\x05\xfb\x23\x1e\x0c\x1d\xc8\x4d\xb2\x7b\x7c\xc7\x13\xfb\x79\x42\x78\x22\x37\x12\xb9\xdc\x5d\x8f\x18\x0c\x33\xce\x0c\x71\x44\x63\x67\x9d\x46\x07\x72\x2e\x7d\x75\x17\xde\xfe\x8c\x3e\xd0\xaa\x98\xb9\xd0\x48\x7f\x01\x00\x00\xff\xff\xbf\x0c\x9c\xe7\xc3\x01\x00\x00")

func iteratorIteratorGoBytes() ([]byte, error) {
	return bindataRead(
		_iteratorIteratorGo,
		"iterator/iterator.go",
	)
}

func iteratorIteratorGo() (*asset, error) {
	bytes, err := iteratorIteratorGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "iterator/iterator.go", size: 451, mode: os.FileMode(420), modTime: time.Unix(1532984840, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"list/list.go": listListGo,
	"set/set.go": setSetGo,
	"typedmap/typedmap.go": typedmapTypedmapGo,
	"iterator/iterator.go": iteratorIteratorGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"iterator": &bintree{nil, map[string]*bintree{
		"iterator.go": &bintree{iteratorIteratorGo, map[string]*bintree{}},
	}},
	"list": &bintree{nil, map[string]*bintree{
		"list.go": &bintree{listListGo, map[string]*bintree{}},
	}},
	"set": &bintree{nil, map[string]*bintree{
		"set.go": &bintree{setSetGo, map[string]*bintree{}},
	}},
	"typedmap": &bintree{nil, map[string]*bintree{
		"typedmap.go": &bintree{typedmapTypedmapGo, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

