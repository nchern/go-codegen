// Code generated by go-codegen(https://github.com/nchern/go-codegen).
// You COULD edit this code it you really need it and know what are you doing

package model

type dtoStruct struct {
	FooField   string  `json:"foo"`
	BarField   int     `json:"bar"`
	BuzzField  bool    `json:"buzz"`
	ValueField float64 `json:"value"`
}

func (m *dtoStruct) Foo() string    { return m.FooField }
func (m *dtoStruct) Bar() int       { return m.BarField }
func (m *dtoStruct) Buzz() bool     { return m.BuzzField }
func (m *dtoStruct) Value() float64 { return m.ValueField }

type ImmutableDTOBuilder struct{ value *dtoStruct }

// NewDTOBuilder creates new ImmutableDTOBuilder builder
func NewDTOBuilder() *ImmutableDTOBuilder { return &ImmutableDTOBuilder{&dtoStruct{}} }

// Foo sets corresponding field value
func (b *ImmutableDTOBuilder) Foo(FooField string) *ImmutableDTOBuilder {
	b.value.FooField = FooField
	return b
}

// Bar sets corresponding field value
func (b *ImmutableDTOBuilder) Bar(BarField int) *ImmutableDTOBuilder {
	b.value.BarField = BarField
	return b
}

// Buzz sets corresponding field value
func (b *ImmutableDTOBuilder) Buzz(BuzzField bool) *ImmutableDTOBuilder {
	b.value.BuzzField = BuzzField
	return b
}

// Value sets corresponding field value
func (b *ImmutableDTOBuilder) Value(ValueField float64) *ImmutableDTOBuilder {
	b.value.ValueField = ValueField
	return b
}

// Build builds the immutable structure
func (b ImmutableDTOBuilder) Build() DTO { ret := *b.value; return &ret }
